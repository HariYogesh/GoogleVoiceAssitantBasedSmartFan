
GoogleVoiceAssistantBasedSmartFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000176  00800060  000022a8  0000233c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000207  008001d6  008001d6  000024b2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000477  00000000  00000000  00002512  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001940  00000000  00000000  00002989  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  000042c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001725  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  0000612c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dd  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e3f  00000000  00000000  00006b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  00007988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_13>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__c.1433>:
      54:	0d 0a 00                                            ...

00000057 <__c.1431>:
      57:	0d 0a 00                                            ...

0000005a <__c.1414>:
      5a:	0d 0a 00                                            ...

0000005d <__c.1412>:
      5d:	0d 0a 00                                            ...

00000060 <__c.1410>:
      60:	0d 0a 00                                            ...

00000063 <__c.1379>:
      63:	77 66 69 6e 69 74 0d 0a 00                          wfinit...

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf e5       	ldi	r28, 0x5F	; 95
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e6       	ldi	r26, 0x60	; 96
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	e8 ea       	ldi	r30, 0xA8	; 168
      80:	f2 e2       	ldi	r31, 0x22	; 34
      82:	02 c0       	rjmp	.+4      	; 0x88 <.do_copy_data_start>

00000084 <.do_copy_data_loop>:
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0

00000088 <.do_copy_data_start>:
      88:	a6 3d       	cpi	r26, 0xD6	; 214
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <.do_copy_data_loop>

0000008e <__do_clear_bss>:
      8e:	13 e0       	ldi	r17, 0x03	; 3
      90:	a6 ed       	ldi	r26, 0xD6	; 214
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	ad 3d       	cpi	r26, 0xDD	; 221
      9a:	b1 07       	cpc	r27, r17
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
      9e:	0e 94 fc 07 	call	0xff8	; 0xff8 <main>
      a2:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
      aa:	9c 01       	movw	r18, r24
      ac:	40 e0       	ldi	r20, 0x00	; 0
      ae:	50 e0       	ldi	r21, 0x00	; 0
      b0:	ca 01       	movw	r24, r20
      b2:	b9 01       	movw	r22, r18
      b4:	60 58       	subi	r22, 0x80	; 128
      b6:	7b 47       	sbci	r23, 0x7B	; 123
      b8:	81 4e       	sbci	r24, 0xE1	; 225
      ba:	9f 4f       	sbci	r25, 0xFF	; 255
      bc:	f3 e0       	ldi	r31, 0x03	; 3
      be:	66 0f       	add	r22, r22
      c0:	77 1f       	adc	r23, r23
      c2:	88 1f       	adc	r24, r24
      c4:	99 1f       	adc	r25, r25
      c6:	fa 95       	dec	r31
      c8:	d1 f7       	brne	.-12     	; 0xbe <serial_init+0x14>
      ca:	e4 e0       	ldi	r30, 0x04	; 4
      cc:	22 0f       	add	r18, r18
      ce:	33 1f       	adc	r19, r19
      d0:	44 1f       	adc	r20, r20
      d2:	55 1f       	adc	r21, r21
      d4:	ea 95       	dec	r30
      d6:	d1 f7       	brne	.-12     	; 0xcc <serial_init+0x22>
      d8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__udivmodsi4>
      dc:	21 50       	subi	r18, 0x01	; 1
      de:	30 40       	sbci	r19, 0x00	; 0
	
	
	
	UQFront=UQEnd=-1;
      e0:	8f ef       	ldi	r24, 0xFF	; 255
      e2:	80 93 f1 01 	sts	0x01F1, r24
      e6:	80 91 f1 01 	lds	r24, 0x01F1
      ea:	80 93 dc 01 	sts	0x01DC, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
      ee:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
      f0:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
      f2:	86 e8       	ldi	r24, 0x86	; 134
      f4:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
      f6:	88 e9       	ldi	r24, 0x98	; 152
      f8:	8a b9       	out	0x0a, r24	; 10
	sei();
      fa:	78 94       	sei

}
      fc:	08 95       	ret

000000fe <serial_finit>:

void serial_finit(uint16_t baudrate,uint8_t xtal)
{
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	26 2f       	mov	r18, r22
uint16_t ubrrvalue = (((xtal*1000000)+(baudrate*8L))/(baudrate*16L)-1);
     108:	7c 01       	movw	r14, r24
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	ca 01       	movw	r24, r20
     116:	b9 01       	movw	r22, r18
     118:	28 e4       	ldi	r18, 0x48	; 72
     11a:	38 ee       	ldi	r19, 0xE8	; 232
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	50 e0       	ldi	r21, 0x00	; 0
     120:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__mulsi3>
     124:	6e 0d       	add	r22, r14
     126:	7f 1d       	adc	r23, r15
     128:	80 1f       	adc	r24, r16
     12a:	91 1f       	adc	r25, r17
     12c:	b3 e0       	ldi	r27, 0x03	; 3
     12e:	66 0f       	add	r22, r22
     130:	77 1f       	adc	r23, r23
     132:	88 1f       	adc	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	ba 95       	dec	r27
     138:	d1 f7       	brne	.-12     	; 0x12e <serial_finit+0x30>
     13a:	a4 e0       	ldi	r26, 0x04	; 4
     13c:	ee 0c       	add	r14, r14
     13e:	ff 1c       	adc	r15, r15
     140:	00 1f       	adc	r16, r16
     142:	11 1f       	adc	r17, r17
     144:	aa 95       	dec	r26
     146:	d1 f7       	brne	.-12     	; 0x13c <serial_finit+0x3e>
     148:	a8 01       	movw	r20, r16
     14a:	97 01       	movw	r18, r14
     14c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__divmodsi4>
     150:	21 50       	subi	r18, 0x01	; 1
     152:	30 40       	sbci	r19, 0x00	; 0
	
	UQFront=UQEnd=-1;
     154:	8f ef       	ldi	r24, 0xFF	; 255
     156:	80 93 f1 01 	sts	0x01F1, r24
     15a:	80 91 f1 01 	lds	r24, 0x01F1
     15e:	80 93 dc 01 	sts	0x01DC, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
     162:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
     164:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
     166:	86 e8       	ldi	r24, 0x86	; 134
     168:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
     16a:	88 e9       	ldi	r24, 0x98	; 152
     16c:	8a b9       	out	0x0a, r24	; 10
	sei();
     16e:	78 94       	sei

}
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
     178:	08 95       	ret

0000017a <serial_read>:
unsigned char serial_read()
{
	char data;
	
	
	if(UQFront==-1)
     17a:	80 91 dc 01 	lds	r24, 0x01DC
     17e:	8f 3f       	cpi	r24, 0xFF	; 255
     180:	11 f4       	brne	.+4      	; 0x186 <serial_read+0xc>
     182:	e0 e0       	ldi	r30, 0x00	; 0
     184:	1d c0       	rjmp	.+58     	; 0x1c0 <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
     186:	e0 91 dc 01 	lds	r30, 0x01DC
     18a:	ff 27       	eor	r31, r31
     18c:	e7 fd       	sbrc	r30, 7
     18e:	f0 95       	com	r31
     190:	ee 50       	subi	r30, 0x0E	; 14
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
     196:	90 91 dc 01 	lds	r25, 0x01DC
     19a:	80 91 f1 01 	lds	r24, 0x01F1
     19e:	98 17       	cp	r25, r24
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <serial_read+0x38>
	{
	
	UQFront=UQEnd=-1;
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	80 93 f1 01 	sts	0x01F1, r24
     1a8:	80 91 f1 01 	lds	r24, 0x01F1
     1ac:	80 93 dc 01 	sts	0x01DC, r24
     1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <serial_read+0x46>
	}
	else
	{
		UQFront++;
     1b2:	80 91 dc 01 	lds	r24, 0x01DC
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
     1b8:	80 93 dc 01 	sts	0x01DC, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
     1bc:	80 91 dc 01 	lds	r24, 0x01DC
		UQFront=0;
	}

	return data;
}
     1c0:	8e 2f       	mov	r24, r30
     1c2:	08 95       	ret

000001c4 <serial_char>:

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     1c4:	5d 9b       	sbis	0x0b, 5	; 11
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <serial_char>

	
	UDR=data;
     1c8:	8c b9       	out	0x0c, r24	; 12
}
     1ca:	08 95       	ret

000001cc <serial_string>:
}



void serial_string(char *str)
{
     1cc:	fc 01       	movw	r30, r24
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <serial_string+0xc>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     1d0:	5d 9b       	sbis	0x0b, 5	; 11
     1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <serial_string+0x4>

	
	UDR=data;
     1d4:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
     1d6:	31 96       	adiw	r30, 0x01	; 1



void serial_string(char *str)
{
	while((*str)!='\0')
     1d8:	80 81       	ld	r24, Z
     1da:	88 23       	and	r24, r24
     1dc:	c9 f7       	brne	.-14     	; 0x1d0 <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
     1de:	08 95       	ret

000001e0 <serial_string_P>:


void serial_string_P(const char *progmem_s)
{
     1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <serial_string_P+0x8>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
     1e2:	5d 9b       	sbis	0x0b, 5	; 11
     1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <serial_string_P+0x2>

	
	UDR=data;
     1e6:	2c b9       	out	0x0c, r18	; 12
     1e8:	fc 01       	movw	r30, r24

register char c;

	
	
	while ( (c = pgm_read_byte(progmem_s++))!='\0' ) {
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	24 91       	lpm	r18, Z+
     1ee:	22 23       	and	r18, r18
     1f0:	c1 f7       	brne	.-16     	; 0x1e2 <serial_string_P+0x2>
       serial_char(c);
		//progmem_s++;
    }
	
}
     1f2:	08 95       	ret

000001f4 <s_readbuffer>:


void s_readbuffer(void *buff,uint16_t len)
{
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	7c 01       	movw	r14, r24
     202:	8b 01       	movw	r16, r22
     204:	c0 e0       	ldi	r28, 0x00	; 0
     206:	d0 e0       	ldi	r29, 0x00	; 0
     208:	07 c0       	rjmp	.+14     	; 0x218 <s_readbuffer+0x24>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
     20a:	0e 94 bd 00 	call	0x17a	; 0x17a <serial_read>
     20e:	f7 01       	movw	r30, r14
     210:	ec 0f       	add	r30, r28
     212:	fd 1f       	adc	r31, r29
     214:	80 83       	st	Z, r24


void s_readbuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
     216:	21 96       	adiw	r28, 0x01	; 1
     218:	c0 17       	cp	r28, r16
     21a:	d1 07       	cpc	r29, r17
     21c:	b0 f3       	brcs	.-20     	; 0x20a <s_readbuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	08 95       	ret

0000022c <serial_available>:

uint8_t serial_available()
{
	if(UQFront==-1) return 0;
     22c:	80 91 dc 01 	lds	r24, 0x01DC
     230:	8f 3f       	cpi	r24, 0xFF	; 255
     232:	11 f4       	brne	.+4      	; 0x238 <serial_available+0xc>
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	1a c0       	rjmp	.+52     	; 0x26c <serial_available+0x40>
	if(UQFront<UQEnd)
     238:	90 91 dc 01 	lds	r25, 0x01DC
     23c:	80 91 f1 01 	lds	r24, 0x01F1
     240:	98 17       	cp	r25, r24
     242:	34 f4       	brge	.+12     	; 0x250 <serial_available+0x24>
		return(UQEnd-UQFront+1);
     244:	90 91 f1 01 	lds	r25, 0x01F1
     248:	80 91 dc 01 	lds	r24, 0x01DC
     24c:	9f 5f       	subi	r25, 0xFF	; 255
     24e:	0d c0       	rjmp	.+26     	; 0x26a <serial_available+0x3e>
	else if(UQFront>UQEnd)
     250:	90 91 dc 01 	lds	r25, 0x01DC
     254:	80 91 f1 01 	lds	r24, 0x01F1
     258:	89 17       	cp	r24, r25
     25a:	14 f0       	brlt	.+4      	; 0x260 <serial_available+0x34>
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	06 c0       	rjmp	.+12     	; 0x26c <serial_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
     260:	90 91 f1 01 	lds	r25, 0x01F1
     264:	80 91 dc 01 	lds	r24, 0x01DC
     268:	93 5d       	subi	r25, 0xD3	; 211
     26a:	98 1b       	sub	r25, r24
	else
		return 1;
}
     26c:	89 2f       	mov	r24, r25
     26e:	08 95       	ret

00000270 <s_clearbuffer>:




void s_clearbuffer()
{
     270:	02 c0       	rjmp	.+4      	; 0x276 <s_clearbuffer+0x6>
	while(serial_available()>0)
	{
		serial_read();
     272:	0e 94 bd 00 	call	0x17a	; 0x17a <serial_read>



void s_clearbuffer()
{
	while(serial_available()>0)
     276:	0e 94 16 01 	call	0x22c	; 0x22c <serial_available>
     27a:	88 23       	and	r24, r24
     27c:	d1 f7       	brne	.-12     	; 0x272 <s_clearbuffer+0x2>
	{
		serial_read();
	}
}
     27e:	08 95       	ret

00000280 <serial_nreadw>:




char serial_nreadw(char *msg,unsigned char length)
{
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	ec 01       	movw	r28, r24
     288:	16 2f       	mov	r17, r22

   while(serial_available()<length);		
     28a:	0e 94 16 01 	call	0x22c	; 0x22c <serial_available>
     28e:	81 17       	cp	r24, r17
     290:	e0 f3       	brcs	.-8      	; 0x28a <serial_nreadw+0xa>
	s_readbuffer(msg,length);
     292:	ce 01       	movw	r24, r28
     294:	61 2f       	mov	r22, r17
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <s_readbuffer>
	return 1;
	
}
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	08 95       	ret

000002a6 <serial_nread>:


char serial_nread(char *msg,unsigned char length)
{
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
     2ae:	16 2f       	mov	r17, r22

  if(serial_available()>=length)
     2b0:	0e 94 16 01 	call	0x22c	; 0x22c <serial_available>
     2b4:	81 17       	cp	r24, r17
     2b6:	38 f0       	brcs	.+14     	; 0x2c6 <serial_nread+0x20>
{	
	s_readbuffer(msg,length);
     2b8:	ce 01       	movw	r24, r28
     2ba:	61 2f       	mov	r22, r17
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <s_readbuffer>
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <serial_nread+0x24>
	return 1;
	
}
else{
       msg[0]='\0';
     2c6:	18 82       	st	Y, r1
     2c8:	80 e0       	ldi	r24, 0x00	; 0
	  return 0;
}


	
}
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	08 95       	ret

000002d2 <__vector_13>:




ISR(USART_RXC_VECT)
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
	
	char data=UDR;
     2ea:	4c b1       	in	r20, 0x0c	; 12

	

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
     2ec:	80 91 f1 01 	lds	r24, 0x01F1
     2f0:	80 91 f1 01 	lds	r24, 0x01F1
     2f4:	20 91 dc 01 	lds	r18, 0x01DC
     2f8:	99 27       	eor	r25, r25
     2fa:	87 fd       	sbrc	r24, 7
     2fc:	90 95       	com	r25
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	33 27       	eor	r19, r19
     302:	27 fd       	sbrc	r18, 7
     304:	30 95       	com	r19
     306:	82 17       	cp	r24, r18
     308:	93 07       	cpc	r25, r19
     30a:	39 f4       	brne	.+14     	; 0x31a <__vector_13+0x48>
	{
		
		UQFront++;
     30c:	80 91 dc 01 	lds	r24, 0x01DC
     310:	8f 5f       	subi	r24, 0xFF	; 255
     312:	80 93 dc 01 	sts	0x01DC, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
     316:	80 91 dc 01 	lds	r24, 0x01DC
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
     31a:	80 91 f1 01 	lds	r24, 0x01F1
		UQEnd=0;
	else
		UQEnd++;
     31e:	80 91 f1 01 	lds	r24, 0x01F1
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	80 93 f1 01 	sts	0x01F1, r24


	URBuff[UQEnd]=data;
     328:	e0 91 f1 01 	lds	r30, 0x01F1
     32c:	ff 27       	eor	r31, r31
     32e:	e7 fd       	sbrc	r30, 7
     330:	f0 95       	com	r31
     332:	ee 50       	subi	r30, 0x0E	; 14
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
     338:	80 91 dc 01 	lds	r24, 0x01DC
     33c:	8f 3f       	cpi	r24, 0xFF	; 255
     33e:	11 f4       	brne	.+4      	; 0x344 <__vector_13+0x72>
     340:	10 92 dc 01 	sts	0x01DC, r1

}
     344:	ff 91       	pop	r31
     346:	ef 91       	pop	r30
     348:	9f 91       	pop	r25
     34a:	8f 91       	pop	r24
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <urclear>:



void urclear()
{
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
   for(int i=0;i<128;i++)
   {
      URBuff[i]='\0';
     360:	fc 01       	movw	r30, r24
     362:	ee 50       	subi	r30, 0x0E	; 14
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	10 82       	st	Z, r1



void urclear()
{
   for(int i=0;i<128;i++)
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	80 38       	cpi	r24, 0x80	; 128
     36c:	91 05       	cpc	r25, r1
     36e:	c1 f7       	brne	.-16     	; 0x360 <urclear+0x4>
   {
      URBuff[i]='\0';
   } 

}
     370:	08 95       	ret

00000372 <sx>:
unsigned char pds18,bds18;


unsigned char sx (unsigned char x,unsigned char a)
{
     switch (x)                                                                  ////////////////////////////////
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	61 f0       	breq	.+24     	; 0x38e <sx+0x1c>
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	18 f4       	brcc	.+6      	; 0x380 <sx+0xe>
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	b9 f4       	brne	.+46     	; 0x3ac <sx+0x3a>
     37e:	05 c0       	rjmp	.+10     	; 0x38a <sx+0x18>
     380:	83 30       	cpi	r24, 0x03	; 3
     382:	39 f0       	breq	.+14     	; 0x392 <sx+0x20>
     384:	84 30       	cpi	r24, 0x04	; 4
     386:	91 f4       	brne	.+36     	; 0x3ac <sx+0x3a>
     388:	06 c0       	rjmp	.+12     	; 0x396 <sx+0x24>
    {                                                                           ////////////////////////////////
		case (1): 
		 #ifdef DDRA
		return ((PINA) & (1<<a));
     38a:	29 b3       	in	r18, 0x19	; 25
     38c:	05 c0       	rjmp	.+10     	; 0x398 <sx+0x26>
		 #endif
            break; 
			
		case (2):
		 return ((PINB) & (1<<a));
     38e:	26 b3       	in	r18, 0x16	; 22
     390:	03 c0       	rjmp	.+6      	; 0x398 <sx+0x26>
 
            break; 
		case (3):
			return ((PINC) & (1<<a));
     392:	23 b3       	in	r18, 0x13	; 19
     394:	01 c0       	rjmp	.+2      	; 0x398 <sx+0x26>
		  
            break; 
		case (4): 
		 return ((PIND) & (1<<a));
     396:	20 b3       	in	r18, 0x10	; 16
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <sx+0x30>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	6a 95       	dec	r22
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <sx+0x2c>
     3a6:	28 23       	and	r18, r24


}
 
 
 }
     3a8:	82 2f       	mov	r24, r18
     3aa:	08 95       	ret
     3ac:	08 95       	ret

000003ae <dx>:

void dx(unsigned char x,unsigned char a,unsigned char y)
{
     switch (x)                                                                  ////////////////////////////////
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	29 f1       	breq	.+74     	; 0x3fc <dx+0x4e>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	20 f4       	brcc	.+8      	; 0x3be <dx+0x10>
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	09 f0       	breq	.+2      	; 0x3bc <dx+0xe>
     3ba:	6a c0       	rjmp	.+212    	; 0x490 <dx+0xe2>
     3bc:	06 c0       	rjmp	.+12     	; 0x3ca <dx+0x1c>
     3be:	83 30       	cpi	r24, 0x03	; 3
     3c0:	b1 f1       	breq	.+108    	; 0x42e <dx+0x80>
     3c2:	84 30       	cpi	r24, 0x04	; 4
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <dx+0x1a>
     3c6:	64 c0       	rjmp	.+200    	; 0x490 <dx+0xe2>
     3c8:	4b c0       	rjmp	.+150    	; 0x460 <dx+0xb2>
    {                                                                           ////////////////////////////////
		case (1): 
		  #ifdef DDRA
		  if(y==1)
     3ca:	41 30       	cpi	r20, 0x01	; 1
     3cc:	61 f4       	brne	.+24     	; 0x3e6 <dx+0x38>
		  {
		     DDRA&=(~(1<<a));
     3ce:	2a b3       	in	r18, 0x1a	; 26
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <dx+0x2c>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	6a 95       	dec	r22
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <dx+0x28>
     3de:	80 95       	com	r24
     3e0:	82 23       	and	r24, r18
     3e2:	8a bb       	out	0x1a, r24	; 26
     3e4:	08 95       	ret
		        
		  }
		  else{
		     DDRA|=(1<<a);
     3e6:	2a b3       	in	r18, 0x1a	; 26
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <dx+0x44>
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	6a 95       	dec	r22
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <dx+0x40>
     3f6:	28 2b       	or	r18, r24
     3f8:	2a bb       	out	0x1a, r18	; 26
     3fa:	08 95       	ret
		  }		
		 #endif
            break; 
			
		case (2):
		  if(y==1)
     3fc:	41 30       	cpi	r20, 0x01	; 1
     3fe:	61 f4       	brne	.+24     	; 0x418 <dx+0x6a>
		  {
		     DDRB&=(~(1<<a));
     400:	27 b3       	in	r18, 0x17	; 23
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <dx+0x5e>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	6a 95       	dec	r22
     40e:	e2 f7       	brpl	.-8      	; 0x408 <dx+0x5a>
     410:	80 95       	com	r24
     412:	82 23       	and	r24, r18
     414:	87 bb       	out	0x17, r24	; 23
     416:	08 95       	ret
		        
		  }
		  else{
		     DDRB|=(1<<a);
     418:	27 b3       	in	r18, 0x17	; 23
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <dx+0x76>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <dx+0x72>
     428:	28 2b       	or	r18, r24
     42a:	27 bb       	out	0x17, r18	; 23
     42c:	08 95       	ret
		  }		
 
            break; 
		case (3):

		  if(y==1)
     42e:	41 30       	cpi	r20, 0x01	; 1
     430:	61 f4       	brne	.+24     	; 0x44a <dx+0x9c>
		  {
		     DDRC&=(~(1<<a));
     432:	24 b3       	in	r18, 0x14	; 20
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <dx+0x90>
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	6a 95       	dec	r22
     440:	e2 f7       	brpl	.-8      	; 0x43a <dx+0x8c>
     442:	80 95       	com	r24
     444:	82 23       	and	r24, r18
     446:	84 bb       	out	0x14, r24	; 20
     448:	08 95       	ret
		        
		  }
		  else{
		     DDRC|=(1<<a);
     44a:	24 b3       	in	r18, 0x14	; 20
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	02 c0       	rjmp	.+4      	; 0x456 <dx+0xa8>
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	6a 95       	dec	r22
     458:	e2 f7       	brpl	.-8      	; 0x452 <dx+0xa4>
     45a:	28 2b       	or	r18, r24
     45c:	24 bb       	out	0x14, r18	; 20
     45e:	08 95       	ret
		  }		 
            break; 
		case (4): 

		  if(y==1)
     460:	41 30       	cpi	r20, 0x01	; 1
     462:	61 f4       	brne	.+24     	; 0x47c <dx+0xce>
		  {
		     DDRD&=(~(1<<a));
     464:	21 b3       	in	r18, 0x11	; 17
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <dx+0xc2>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	6a 95       	dec	r22
     472:	e2 f7       	brpl	.-8      	; 0x46c <dx+0xbe>
     474:	80 95       	com	r24
     476:	82 23       	and	r24, r18
     478:	81 bb       	out	0x11, r24	; 17
     47a:	08 95       	ret
		        
		  }
		  else{
		     DDRD|=(1<<a);
     47c:	21 b3       	in	r18, 0x11	; 17
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <dx+0xda>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <dx+0xd6>
     48c:	28 2b       	or	r18, r24
     48e:	21 bb       	out	0x11, r18	; 17
     490:	08 95       	ret

00000492 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs)
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     492:	66 23       	and	r22, r22
     494:	11 f0       	breq	.+4      	; 0x49a <lcd_write+0x8>
       lcd_rs_high();
     496:	dc 9a       	sbi	0x1b, 4	; 27
     498:	01 c0       	rjmp	.+2      	; 0x49c <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     49a:	dc 98       	cbi	0x1b, 4	; 27
    }
    lcd_rw_low();
     49c:	dd 98       	cbi	0x1b, 5	; 27
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     49e:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     4a0:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     4a2:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     4a4:	a7 9a       	sbi	0x14, 7	; 20

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     4a6:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     4a8:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     4aa:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     4ac:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     4ae:	87 fd       	sbrc	r24, 7
     4b0:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     4b2:	86 fd       	sbrc	r24, 6
     4b4:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     4b6:	85 fd       	sbrc	r24, 5
     4b8:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     4ba:	84 fd       	sbrc	r24, 4
     4bc:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     4be:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <lcd_write+0x30>
    lcd_e_low();
     4c2:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     4c4:	af 98       	cbi	0x15, 7	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     4c6:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     4c8:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     4ca:	ac 98       	cbi	0x15, 4	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     4cc:	83 fd       	sbrc	r24, 3
     4ce:	af 9a       	sbi	0x15, 7	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     4d0:	82 fd       	sbrc	r24, 2
     4d2:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     4d4:	81 fd       	sbrc	r24, 1
     4d6:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     4d8:	80 fd       	sbrc	r24, 0
     4da:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     4dc:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <lcd_write+0x4e>
    lcd_e_low();
     4e0:	de 98       	cbi	0x1b, 6	; 27
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     4e2:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     4e4:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     4e6:	ae 9a       	sbi	0x15, 6	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     4e8:	af 9a       	sbi	0x15, 7	; 21
    }
}
     4ea:	08 95       	ret

000004ec <lcd_waitbusy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	97 e2       	ldi	r25, 0x27	; 39
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <lcd_waitbusy+0x4>


    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     4f4:	84 e0       	ldi	r24, 0x04	; 4
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <lcd_waitbusy+0xc>
     4fc:	dc 98       	cbi	0x1b, 4	; 27
    lcd_rw_high();                           /* RW=1  read mode      */
     4fe:	dd 9a       	sbi	0x1b, 5	; 27
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     500:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     502:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     504:	a6 98       	cbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     506:	a7 98       	cbi	0x14, 7	; 20

        /* read high nibble first */
        lcd_e_high();
     508:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
     50a:	00 c0       	rjmp	.+0      	; 0x50c <lcd_waitbusy+0x20>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     50c:	9c 9b       	sbis	0x13, 4	; 19
     50e:	02 c0       	rjmp	.+4      	; 0x514 <lcd_waitbusy+0x28>
     510:	80 e1       	ldi	r24, 0x10	; 16
     512:	01 c0       	rjmp	.+2      	; 0x516 <lcd_waitbusy+0x2a>
     514:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     516:	9d 99       	sbic	0x13, 5	; 19
     518:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     51a:	9e 99       	sbic	0x13, 6	; 19
     51c:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     51e:	9f 99       	sbic	0x13, 7	; 19
     520:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     522:	de 98       	cbi	0x1b, 6	; 27

        lcd_e_delay();                       /* Enable 500ns low       */
     524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_waitbusy+0x3a>

        /* read low nibble */
        lcd_e_high();
     526:	de 9a       	sbi	0x1b, 6	; 27
        lcd_e_delay();
     528:	00 c0       	rjmp	.+0      	; 0x52a <lcd_waitbusy+0x3e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     52a:	9c 99       	sbic	0x13, 4	; 19
     52c:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     52e:	9d 99       	sbic	0x13, 5	; 19
     530:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     532:	9e 99       	sbic	0x13, 6	; 19
     534:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
     536:	9f 99       	sbic	0x13, 7	; 19
     538:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     53a:	de 98       	cbi	0x1b, 6	; 27
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter

}/* lcd_waitbusy */
     53c:	08 95       	ret

0000053e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     53e:	1f 93       	push	r17
     540:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     542:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_waitbusy>
    lcd_write(cmd,0);
     546:	81 2f       	mov	r24, r17
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	0e 94 49 02 	call	0x492	; 0x492 <lcd_write>
}
     54e:	1f 91       	pop	r17
     550:	08 95       	ret

00000552 <lcd_data>:
Send data byte to LCD controller
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     552:	1f 93       	push	r17
     554:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     556:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_waitbusy>
    lcd_write(data,1);
     55a:	81 2f       	mov	r24, r17
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	0e 94 49 02 	call	0x492	; 0x492 <lcd_write>
}
     562:	1f 91       	pop	r17
     564:	08 95       	ret

00000566 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
     566:	66 23       	and	r22, r22
     568:	11 f4       	brne	.+4      	; 0x56e <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     56a:	80 58       	subi	r24, 0x80	; 128
     56c:	01 c0       	rjmp	.+2      	; 0x570 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     56e:	80 54       	subi	r24, 0x40	; 64
     570:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
     574:	08 95       	ret

00000576 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     576:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_waitbusy>
}
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	08 95       	ret

0000057e <lcd_clear>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clear(void)
{
    lcd_command(1<<LCD_CLR);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
}
     584:	08 95       	ret

00000586 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
}
     58c:	08 95       	ret

0000058e <lcd_putc>:
Display character at current cursor position
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     58e:	1f 93       	push	r17
     590:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     592:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_waitbusy>
    if (c=='\n')
     596:	1a 30       	cpi	r17, 0x0A	; 10
     598:	49 f4       	brne	.+18     	; 0x5ac <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     59a:	80 34       	cpi	r24, 0x40	; 64
     59c:	10 f0       	brcs	.+4      	; 0x5a2 <lcd_putc+0x14>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <lcd_putc+0x16>
     5a2:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     5a4:	80 58       	subi	r24, 0x80	; 128
     5a6:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     5ac:	81 2f       	mov	r24, r17
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	0e 94 49 02 	call	0x492	; 0x492 <lcd_write>
    }

}/* lcd_putc */
     5b4:	1f 91       	pop	r17
     5b6:	08 95       	ret

000005b8 <lcd_string>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <lcd_string+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
     5c0:	0e 94 c7 02 	call	0x58e	; 0x58e <lcd_putc>
void lcd_string(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     5c4:	89 91       	ld	r24, Y+
     5c6:	88 23       	and	r24, r24
     5c8:	d9 f7       	brne	.-10     	; 0x5c0 <lcd_string+0x8>
        lcd_putc(c);
    }

}/* lcd_string */
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     5d8:	0e 94 c7 02 	call	0x58e	; 0x58e <lcd_putc>
     5dc:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	84 91       	lpm	r24, Z+
     5e2:	88 23       	and	r24, r24
     5e4:	c9 f7       	brne	.-14     	; 0x5d8 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <lcd_string_X>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_string_X(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <lcd_string_X+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
     5f4:	0e 94 c7 02 	call	0x58e	; 0x58e <lcd_putc>
     5f8:	fe 01       	movw	r30, r28
void lcd_string_X(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     5fa:	21 96       	adiw	r28, 0x01	; 1
     5fc:	84 91       	lpm	r24, Z+
     5fe:	88 23       	and	r24, r24
     600:	c9 f7       	brne	.-14     	; 0x5f4 <lcd_string_X+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <lcd_init>:
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     608:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     60a:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     60c:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     60e:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     610:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     612:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     614:	a7 9a       	sbi	0x14, 7	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	9d e7       	ldi	r25, 0x7D	; 125
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     61e:	ad 9a       	sbi	0x15, 5	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     620:	ac 9a       	sbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     622:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     624:	00 c0       	rjmp	.+0      	; 0x626 <lcd_init+0x1e>
    lcd_e_low();
     626:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	97 e2       	ldi	r25, 0x27	; 39
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <lcd_init+0x24>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     630:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     632:	00 c0       	rjmp	.+0      	; 0x634 <lcd_init+0x2c>
    lcd_e_low();
     634:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     636:	80 e8       	ldi	r24, 0x80	; 128
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <lcd_init+0x34>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     640:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     642:	00 c0       	rjmp	.+0      	; 0x644 <lcd_init+0x3c>
    lcd_e_low();
     644:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     646:	fc 01       	movw	r30, r24
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     64c:	ac 98       	cbi	0x15, 4	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     64e:	de 9a       	sbi	0x1b, 6	; 27
    lcd_e_delay();
     650:	00 c0       	rjmp	.+0      	; 0x652 <lcd_init+0x4a>
    lcd_e_low();
     652:	de 98       	cbi	0x1b, 6	; 27
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     658:	88 e2       	ldi	r24, 0x28	; 40
     65a:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
    lcd_clear();                           /* display clear                */
     664:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_clear>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     668:	86 e0       	ldi	r24, 0x06	; 6
     66a:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     66e:	8c e0       	ldi	r24, 0x0C	; 12
     670:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_command>

}/* lcd_init */
     674:	08 95       	ret

00000676 <lcd_num>:

/*************************************************************************
Snumber display
*************************************************************************/
void lcd_num(long num)
{
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	27 97       	sbiw	r28, 0x07	; 7
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
char buffer[7];

 ltoa( num , buffer, 10);
     68e:	8e 01       	movw	r16, r28
     690:	0f 5f       	subi	r16, 0xFF	; 255
     692:	1f 4f       	sbci	r17, 0xFF	; 255
     694:	a8 01       	movw	r20, r16
     696:	2a e0       	ldi	r18, 0x0A	; 10
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <ltoa>
    lcd_string(buffer);
     69e:	c8 01       	movw	r24, r16
     6a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
}
     6a4:	27 96       	adiw	r28, 0x07	; 7
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	08 95       	ret

000006ba <serial_numl>:
}



void serial_numl(long num)
{
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	27 97       	sbiw	r28, 0x07	; 7
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
     6d8:	a8 01       	movw	r20, r16
     6da:	2a e0       	ldi	r18, 0x0A	; 10
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <ltoa>
    serial_string(buffer);
     6e2:	c8 01       	movw	r24, r16
     6e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
}
     6e8:	27 96       	adiw	r28, 0x07	; 7
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	cf 91       	pop	r28
     6f6:	df 91       	pop	r29
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <writecommand>:
   return(data);
 }


void writecommand(uchar data)
 { uchar  i;
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	08 2f       	mov	r16, r24
     70a:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     70c:	20 e5       	ldi	r18, 0x50	; 80
     70e:	d2 2e       	mov	r13, r18
   for(i=0; i<8; i++)
    { write(pds18,bds18,l);
     710:	90 ef       	ldi	r25, 0xF0	; 240
     712:	e9 2e       	mov	r14, r25
     714:	8a e0       	ldi	r24, 0x0A	; 10
     716:	f8 2e       	mov	r15, r24
     718:	60 91 db 01 	lds	r22, 0x01DB
     71c:	80 91 da 01 	lds	r24, 0x01DA
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     72c:	8d 2d       	mov	r24, r13
     72e:	8a 95       	dec	r24
     730:	f1 f7       	brne	.-4      	; 0x72e <writecommand+0x30>
     732:	80 91 da 01 	lds	r24, 0x01DA
     736:	60 91 db 01 	lds	r22, 0x01DB
      _delay_us(15);    
      if(data & 0x01)
     73a:	00 ff       	sbrs	r16, 0
     73c:	05 c0       	rjmp	.+10     	; 0x748 <writecommand+0x4a>
         write(pds18,bds18,h);
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	04 c0       	rjmp	.+8      	; 0x750 <writecommand+0x52>
      else 
         write(pds18,bds18,l);
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     754:	8e 2d       	mov	r24, r14
     756:	8a 95       	dec	r24
     758:	f1 f7       	brne	.-4      	; 0x756 <writecommand+0x58>
      _delay_us(45);
      data >>= 1;
      write(pds18,bds18,h);
     75a:	60 91 db 01 	lds	r22, 0x01DB
     75e:	80 91 da 01 	lds	r24, 0x01DA
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     76e:	8f 2d       	mov	r24, r15
     770:	8a 95       	dec	r24
     772:	f1 f7       	brne	.-4      	; 0x770 <writecommand+0x72>
 }


void writecommand(uchar data)
 { uchar  i;
   for(i=0; i<8; i++)
     774:	1f 5f       	subi	r17, 0xFF	; 255
     776:	18 30       	cpi	r17, 0x08	; 8
     778:	11 f0       	breq	.+4      	; 0x77e <writecommand+0x80>
      if(data & 0x01)
         write(pds18,bds18,h);
      else 
         write(pds18,bds18,l);
      _delay_us(45);
      data >>= 1;
     77a:	06 95       	lsr	r16
     77c:	cd cf       	rjmp	.-102    	; 0x718 <writecommand+0x1a>
      write(pds18,bds18,h);
      _delay_us(2);
    }
 }
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	08 95       	ret

0000078a <readbyte>:




uchar readbyte(void)
 { uchar i = 0,data = 0;int yk=bds18,hk=pds18;
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	10 91 db 01 	lds	r17, 0x01DB
     7a0:	80 91 da 01 	lds	r24, 0x01DA
     7a4:	c8 2f       	mov	r28, r24
     7a6:	d0 e0       	ldi	r29, 0x00	; 0

   dx(pds18,bds18,0); 
     7a8:	61 2f       	mov	r22, r17
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	0e 94 d7 01 	call	0x3ae	; 0x3ae <dx>
    { write(pds18,bds18,l) ;
      data >>= 1;
      _delay_us(3);
      write(pds18,bds18,h);
     if(hk==1)
	   DDRA&=~(1<<yk);
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <readbyte+0x30>
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	1a 95       	dec	r17
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <readbyte+0x2c>
     7be:	08 2f       	mov	r16, r24
     7c0:	00 95       	com	r16
     7c2:	ff 24       	eor	r15, r15
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	60 e1       	ldi	r22, 0x10	; 16
     7c8:	b6 2e       	mov	r11, r22
uchar readbyte(void)
 { uchar i = 0,data = 0;int yk=bds18,hk=pds18;

   dx(pds18,bds18,0); 
   for (i=0; i<8; i++)
    { write(pds18,bds18,l) ;
     7ca:	55 e3       	ldi	r21, 0x35	; 53
     7cc:	c5 2e       	mov	r12, r21
     7ce:	40 ef       	ldi	r20, 0xF0	; 240
     7d0:	d4 2e       	mov	r13, r20
     7d2:	3a e1       	ldi	r19, 0x1A	; 26
     7d4:	e3 2e       	mov	r14, r19
     7d6:	60 91 db 01 	lds	r22, 0x01DB
     7da:	80 91 da 01 	lds	r24, 0x01DA
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
      data >>= 1;
     7ea:	16 95       	lsr	r17
     7ec:	8b 2d       	mov	r24, r11
     7ee:	8a 95       	dec	r24
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <readbyte+0x64>
      _delay_us(3);
      write(pds18,bds18,h);
     7f2:	60 91 db 01 	lds	r22, 0x01DB
     7f6:	80 91 da 01 	lds	r24, 0x01DA
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     if(hk==1)
     806:	c1 30       	cpi	r28, 0x01	; 1
     808:	d1 05       	cpc	r29, r1
     80a:	21 f4       	brne	.+8      	; 0x814 <readbyte+0x8a>
	   DDRA&=~(1<<yk);
     80c:	8a b3       	in	r24, 0x1a	; 26
     80e:	80 23       	and	r24, r16
     810:	8a bb       	out	0x1a, r24	; 26
     812:	14 c0       	rjmp	.+40     	; 0x83c <readbyte+0xb2>
      else if(hk==2) 
     814:	c2 30       	cpi	r28, 0x02	; 2
     816:	d1 05       	cpc	r29, r1
     818:	21 f4       	brne	.+8      	; 0x822 <readbyte+0x98>
	    DDRB&=~(1<<yk);
     81a:	87 b3       	in	r24, 0x17	; 23
     81c:	80 23       	and	r24, r16
     81e:	87 bb       	out	0x17, r24	; 23
     820:	0d c0       	rjmp	.+26     	; 0x83c <readbyte+0xb2>
		 else if(hk==3) 
     822:	c3 30       	cpi	r28, 0x03	; 3
     824:	d1 05       	cpc	r29, r1
     826:	21 f4       	brne	.+8      	; 0x830 <readbyte+0xa6>
	    DDRC&=~(1<<yk);
     828:	84 b3       	in	r24, 0x14	; 20
     82a:	80 23       	and	r24, r16
     82c:	84 bb       	out	0x14, r24	; 20
     82e:	06 c0       	rjmp	.+12     	; 0x83c <readbyte+0xb2>
		 else if(hk==4) 
     830:	c4 30       	cpi	r28, 0x04	; 4
     832:	d1 05       	cpc	r29, r1
     834:	19 f4       	brne	.+6      	; 0x83c <readbyte+0xb2>
	    DDRD&=~(1<<yk);
     836:	81 b3       	in	r24, 0x11	; 17
     838:	80 23       	and	r24, r16
     83a:	81 bb       	out	0x11, r24	; 17
     83c:	8c 2d       	mov	r24, r12
     83e:	8a 95       	dec	r24
     840:	f1 f7       	brne	.-4      	; 0x83e <readbyte+0xb4>
		
      _delay_us(10);
      if(sx(pds18,bds18))
     842:	80 91 da 01 	lds	r24, 0x01DA
     846:	60 91 db 01 	lds	r22, 0x01DB
     84a:	0e 94 b9 01 	call	0x372	; 0x372 <sx>
     84e:	81 11       	cpse	r24, r1
         data |= 0x80;
     850:	10 68       	ori	r17, 0x80	; 128
      dx(pds18,bds18,0);
     852:	80 91 da 01 	lds	r24, 0x01DA
     856:	60 91 db 01 	lds	r22, 0x01DB
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <dx>
      write(pds18,bds18,h);
     860:	60 91 db 01 	lds	r22, 0x01DB
     864:	80 91 da 01 	lds	r24, 0x01DA
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     874:	8d 2d       	mov	r24, r13
     876:	8a 95       	dec	r24
     878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
     87a:	8e 2d       	mov	r24, r14
     87c:	8a 95       	dec	r24
     87e:	f1 f7       	brne	.-4      	; 0x87c <__stack+0x1d>

uchar readbyte(void)
 { uchar i = 0,data = 0;int yk=bds18,hk=pds18;

   dx(pds18,bds18,0); 
   for (i=0; i<8; i++)
     880:	f3 94       	inc	r15
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	f8 16       	cp	r15, r24
     886:	09 f0       	breq	.+2      	; 0x88a <__stack+0x2b>
     888:	a6 cf       	rjmp	.-180    	; 0x7d6 <readbyte+0x4c>
      write(pds18,bds18,h);
      _delay_us(45);
      _delay_us(5);
    }
   return(data);
 }
     88a:	81 2f       	mov	r24, r17
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	08 95       	ret

000008a0 <init_ds18b20>:



// Start transaction with 1-wire line. 
void init_ds18b20(void)
 { dx(pds18,bds18,0); 
     8a0:	80 91 da 01 	lds	r24, 0x01DA
     8a4:	60 91 db 01 	lds	r22, 0x01DB
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <dx>
   write(pds18,bds18,l) ;    
     8ae:	60 91 db 01 	lds	r22, 0x01DB
     8b2:	80 91 da 01 	lds	r24, 0x01DA
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8c2:	80 e6       	ldi	r24, 0x60	; 96
     8c4:	99 e0       	ldi	r25, 0x09	; 9
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <init_ds18b20+0x26>
   _delay_us(600); 
   write(pds18,bds18,h);    
     8ca:	60 91 db 01 	lds	r22, 0x01DB
     8ce:	80 91 da 01 	lds	r24, 0x01DA
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     8de:	88 ec       	ldi	r24, 0xC8	; 200
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <init_ds18b20+0x42>
   _delay_us(50);  
   dx(pds18,bds18,1); 
     8e6:	80 91 da 01 	lds	r24, 0x01DA
     8ea:	60 91 db 01 	lds	r22, 0x01DB
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <dx>
   while(sx(pds18,bds18));
     8f4:	80 91 da 01 	lds	r24, 0x01DA
     8f8:	60 91 db 01 	lds	r22, 0x01DB
     8fc:	0e 94 b9 01 	call	0x372	; 0x372 <sx>
     900:	88 23       	and	r24, r24
     902:	c1 f7       	brne	.-16     	; 0x8f4 <init_ds18b20+0x54>
     904:	80 ec       	ldi	r24, 0xC0	; 192
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <init_ds18b20+0x68>
   _delay_us(240); 
   dx(pds18,bds18,0);   
     90c:	80 91 da 01 	lds	r24, 0x01DA
     910:	60 91 db 01 	lds	r22, 0x01DB
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	0e 94 d7 01 	call	0x3ae	; 0x3ae <dx>
   write(pds18,bds18,h);    
     91a:	60 91 db 01 	lds	r22, 0x01DB
     91e:	80 91 da 01 	lds	r24, 0x01DA
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
     92e:	80 eb       	ldi	r24, 0xB0	; 176
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <init_ds18b20+0x92>
   _delay_us(300); 
 }
     936:	08 95       	ret

00000938 <read_temp>:
 }



uchar read_temp(void)
 {
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
uchar a, b, tt;
 uint t;
   init_ds18b20();
     93c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <init_ds18b20>
  
  
   writecommand(0xCC); 
     940:	8c ec       	ldi	r24, 0xCC	; 204
     942:	0e 94 7f 03 	call	0x6fe	; 0x6fe <writecommand>
   writecommand(0x44);
     946:	84 e4       	ldi	r24, 0x44	; 68
     948:	0e 94 7f 03 	call	0x6fe	; 0x6fe <writecommand>
   init_ds18b20(); 
     94c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <init_ds18b20>
  
   writecommand(0xCC); 
     950:	8c ec       	ldi	r24, 0xCC	; 204
     952:	0e 94 7f 03 	call	0x6fe	; 0x6fe <writecommand>
   writecommand(0xBE); 
     956:	8e eb       	ldi	r24, 0xBE	; 190
     958:	0e 94 7f 03 	call	0x6fe	; 0x6fe <writecommand>
   a = readbyte();
     95c:	0e 94 c5 03 	call	0x78a	; 0x78a <readbyte>
     960:	08 2f       	mov	r16, r24
   b = readbyte();
     962:	0e 94 c5 03 	call	0x78a	; 0x78a <readbyte>
   t = b;
   t <<= 8;
     966:	38 2f       	mov	r19, r24
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	20 2b       	or	r18, r16
     96e:	31 2b       	or	r19, r17
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	ca 01       	movw	r24, r20
     976:	b9 01       	movw	r22, r18
     978:	0e 94 28 0c 	call	0x1850	; 0x1850 <__floatunsisf>
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e8       	ldi	r20, 0x80	; 128
     982:	5d e3       	ldi	r21, 0x3D	; 61
     984:	0e 94 8e 0c 	call	0x191c	; 0x191c <__mulsf3>
     988:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fixunssfsi>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
   t = t|a;
   tt = t*0.0625;
	return(tt);
 }
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <ds18b_init>:


void ds18b_init(unsigned char port,unsigned char bit)
{

pds18 = port;
     996:	80 93 da 01 	sts	0x01DA, r24
bds18 = bit;
     99a:	60 93 db 01 	sts	0x01DB, r22
init_ds18b20();
     99e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <init_ds18b20>

}
     9a2:	08 95       	ret

000009a4 <fan_off>:
	fast_on;
	slow_off;
}
void  fan_off()
{ 
	medium_off;
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	fast_off;
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	64 e0       	ldi	r22, 0x04	; 4
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	slow_off;
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
}
     9d4:	08 95       	ret

000009d6 <fast>:
	fast_off;
	slow_off;
}
void  fast()
{ 
	medium_off;
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	fast_on;
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	slow_off;
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	41 e0       	ldi	r20, 0x01	; 1
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
}
     a06:	08 95       	ret

00000a08 <medium>:
	fast_off;
	slow_on;
}
void  medium()
{ 
	medium_on;
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	fast_off;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	64 e0       	ldi	r22, 0x04	; 4
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	slow_off;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
}
     a38:	08 95       	ret

00000a3a <slow>:
#define fast_on write(portb,4,l)//orange
#define fast_off write(portb,4,h)

void slow()
{ 
	medium_off;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	fast_off;
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	64 e0       	ldi	r22, 0x04	; 4
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
	slow_on;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
}
     a6a:	08 95       	ret

00000a6c <all_lights_off>:
			room_light_on;
			dinning_light_on;
}
void all_lights_off()
{ 
			hall_light_off;
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
			kitchen_light_off;
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
			room_light_off;
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
			dinning_light_off;
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	65 e0       	ldi	r22, 0x05	; 5
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
}
     aac:	08 95       	ret

00000aae <all_lights_on>:



void all_lights_on()
{ 
			hall_light_on;
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
			kitchen_light_on;
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
			room_light_on;
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
			dinning_light_on;
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	65 e0       	ldi	r22, 0x05	; 5
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
}
     aee:	08 95       	ret

00000af0 <data_update>:
return 0;

}

int data_update(char *name,char *val)
{
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	df 93       	push	r29
     af6:	cf 93       	push	r28
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	c4 56       	subi	r28, 0x64	; 100
     afe:	d0 40       	sbci	r29, 0x00	; 0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	f8 94       	cli
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	cd bf       	out	0x3d, r28	; 61
char responsex[20];
char buff[80];
sprintf(buff,"http://api.clobous.com/%s/data/update?%s=%s",cloudid,name,val);
     b0a:	2d b7       	in	r18, 0x3d	; 61
     b0c:	3e b7       	in	r19, 0x3e	; 62
     b0e:	2a 50       	subi	r18, 0x0A	; 10
     b10:	30 40       	sbci	r19, 0x00	; 0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	3e bf       	out	0x3e, r19	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	2d bf       	out	0x3d, r18	; 61
     b1c:	ed b7       	in	r30, 0x3d	; 61
     b1e:	fe b7       	in	r31, 0x3e	; 62
     b20:	31 96       	adiw	r30, 0x01	; 1
     b22:	8e 01       	movw	r16, r28
     b24:	0b 5e       	subi	r16, 0xEB	; 235
     b26:	1f 4f       	sbci	r17, 0xFF	; 255
     b28:	ad b7       	in	r26, 0x3d	; 61
     b2a:	be b7       	in	r27, 0x3e	; 62
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	1c 93       	st	X, r17
     b30:	0e 93       	st	-X, r16
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	20 e6       	ldi	r18, 0x60	; 96
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	33 83       	std	Z+3, r19	; 0x03
     b3a:	22 83       	std	Z+2, r18	; 0x02
     b3c:	2c e8       	ldi	r18, 0x8C	; 140
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	35 83       	std	Z+5, r19	; 0x05
     b42:	24 83       	std	Z+4, r18	; 0x04
     b44:	97 83       	std	Z+7, r25	; 0x07
     b46:	86 83       	std	Z+6, r24	; 0x06
     b48:	71 87       	std	Z+9, r23	; 0x09
     b4a:	60 87       	std	Z+8, r22	; 0x08
     b4c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>

#if(INTERNET==1)

wifi_http(buff,responsex);
     b50:	2d b7       	in	r18, 0x3d	; 61
     b52:	3e b7       	in	r19, 0x3e	; 62
     b54:	26 5f       	subi	r18, 0xF6	; 246
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	3e bf       	out	0x3e, r19	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	2d bf       	out	0x3d, r18	; 61
     b62:	c8 01       	movw	r24, r16
     b64:	8e 01       	movw	r16, r28
     b66:	0f 5f       	subi	r16, 0xFF	; 255
     b68:	1f 4f       	sbci	r17, 0xFF	; 255
     b6a:	b8 01       	movw	r22, r16
     b6c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <wifi_http>

#if(INTERNET==2)
 gprs_http((buff),responsex);
#endif

if(compare(responsex,"{success}"))
     b70:	c8 01       	movw	r24, r16
     b72:	63 e9       	ldi	r22, 0x93	; 147
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
     b7a:	9c 01       	movw	r18, r24
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	11 f0       	breq	.+4      	; 0xb84 <data_update+0x94>
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0

}
else
return 0;

}
     b84:	c9 01       	movw	r24, r18
     b86:	cc 59       	subi	r28, 0x9C	; 156
     b88:	df 4f       	sbci	r29, 0xFF	; 255
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	08 95       	ret

00000b9e <data_updatex>:




int data_updatex(char *name,int val)
{
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	c4 56       	subi	r28, 0x64	; 100
     bac:	d0 40       	sbci	r29, 0x00	; 0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
char responsex[20];
char buff[80];
sprintf(buff,"http://api.clobous.com/%s/data/update?%s=%d",cloudid,name,val);
     bb8:	2d b7       	in	r18, 0x3d	; 61
     bba:	3e b7       	in	r19, 0x3e	; 62
     bbc:	2a 50       	subi	r18, 0x0A	; 10
     bbe:	30 40       	sbci	r19, 0x00	; 0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	3e bf       	out	0x3e, r19	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	2d bf       	out	0x3d, r18	; 61
     bca:	ed b7       	in	r30, 0x3d	; 61
     bcc:	fe b7       	in	r31, 0x3e	; 62
     bce:	31 96       	adiw	r30, 0x01	; 1
     bd0:	8e 01       	movw	r16, r28
     bd2:	0b 5e       	subi	r16, 0xEB	; 235
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	ad b7       	in	r26, 0x3d	; 61
     bd8:	be b7       	in	r27, 0x3e	; 62
     bda:	12 96       	adiw	r26, 0x02	; 2
     bdc:	1c 93       	st	X, r17
     bde:	0e 93       	st	-X, r16
     be0:	11 97       	sbiw	r26, 0x01	; 1
     be2:	2d e9       	ldi	r18, 0x9D	; 157
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	33 83       	std	Z+3, r19	; 0x03
     be8:	22 83       	std	Z+2, r18	; 0x02
     bea:	2c e8       	ldi	r18, 0x8C	; 140
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	35 83       	std	Z+5, r19	; 0x05
     bf0:	24 83       	std	Z+4, r18	; 0x04
     bf2:	97 83       	std	Z+7, r25	; 0x07
     bf4:	86 83       	std	Z+6, r24	; 0x06
     bf6:	71 87       	std	Z+9, r23	; 0x09
     bf8:	60 87       	std	Z+8, r22	; 0x08
     bfa:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>

#if(INTERNET==1)

wifi_http(buff,responsex);
     bfe:	2d b7       	in	r18, 0x3d	; 61
     c00:	3e b7       	in	r19, 0x3e	; 62
     c02:	26 5f       	subi	r18, 0xF6	; 246
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	3e bf       	out	0x3e, r19	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	2d bf       	out	0x3d, r18	; 61
     c10:	c8 01       	movw	r24, r16
     c12:	8e 01       	movw	r16, r28
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	b8 01       	movw	r22, r16
     c1a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <wifi_http>

#if(INTERNET==2)
 gprs_http((buff),responsex);
#endif

if(compare(responsex,"{success}"))
     c1e:	c8 01       	movw	r24, r16
     c20:	63 e9       	ldi	r22, 0x93	; 147
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
     c28:	9c 01       	movw	r18, r24
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	11 f0       	breq	.+4      	; 0xc32 <data_updatex+0x94>
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	30 e0       	ldi	r19, 0x00	; 0

}
else
return 0;

}
     c32:	c9 01       	movw	r24, r18
     c34:	cc 59       	subi	r28, 0x9C	; 156
     c36:	df 4f       	sbci	r29, 0xFF	; 255
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <gps_update>:
#define CLOBOUS_H



int gps_update(char *lat,char *lon,char* speed)
{
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	c4 56       	subi	r28, 0x64	; 100
     c5a:	d0 40       	sbci	r29, 0x00	; 0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61

char responsex[20];
char buff[80];
sprintf(buff,"http://api.clobous.com/%s/track/?lat=%s&long=%s&speed=%s",cloudid,lat,lon,speed);
     c66:	2d b7       	in	r18, 0x3d	; 61
     c68:	3e b7       	in	r19, 0x3e	; 62
     c6a:	2c 50       	subi	r18, 0x0C	; 12
     c6c:	30 40       	sbci	r19, 0x00	; 0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	3e bf       	out	0x3e, r19	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	2d bf       	out	0x3d, r18	; 61
     c78:	ed b7       	in	r30, 0x3d	; 61
     c7a:	fe b7       	in	r31, 0x3e	; 62
     c7c:	31 96       	adiw	r30, 0x01	; 1
     c7e:	8e 01       	movw	r16, r28
     c80:	0b 5e       	subi	r16, 0xEB	; 235
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	ad b7       	in	r26, 0x3d	; 61
     c86:	be b7       	in	r27, 0x3e	; 62
     c88:	12 96       	adiw	r26, 0x02	; 2
     c8a:	1c 93       	st	X, r17
     c8c:	0e 93       	st	-X, r16
     c8e:	11 97       	sbiw	r26, 0x01	; 1
     c90:	29 ec       	ldi	r18, 0xC9	; 201
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	33 83       	std	Z+3, r19	; 0x03
     c96:	22 83       	std	Z+2, r18	; 0x02
     c98:	2c e8       	ldi	r18, 0x8C	; 140
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	35 83       	std	Z+5, r19	; 0x05
     c9e:	24 83       	std	Z+4, r18	; 0x04
     ca0:	97 83       	std	Z+7, r25	; 0x07
     ca2:	86 83       	std	Z+6, r24	; 0x06
     ca4:	71 87       	std	Z+9, r23	; 0x09
     ca6:	60 87       	std	Z+8, r22	; 0x08
     ca8:	53 87       	std	Z+11, r21	; 0x0b
     caa:	42 87       	std	Z+10, r20	; 0x0a
     cac:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>

#if(INTERNET==1)

wifi_http(buff,responsex);
     cb0:	2d b7       	in	r18, 0x3d	; 61
     cb2:	3e b7       	in	r19, 0x3e	; 62
     cb4:	24 5f       	subi	r18, 0xF4	; 244
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	3e bf       	out	0x3e, r19	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	2d bf       	out	0x3d, r18	; 61
     cc2:	c8 01       	movw	r24, r16
     cc4:	8e 01       	movw	r16, r28
     cc6:	0f 5f       	subi	r16, 0xFF	; 255
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
     cca:	b8 01       	movw	r22, r16
     ccc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <wifi_http>

#if(INTERNET==2)
 gprs_http((buff),responsex);
#endif

if(compare(responsex,"{success}"))
     cd0:	c8 01       	movw	r24, r16
     cd2:	63 e9       	ldi	r22, 0x93	; 147
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
     cda:	9c 01       	movw	r18, r24
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	11 f0       	breq	.+4      	; 0xce4 <gps_update+0x98>
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
else
return 0;



}
     ce4:	c9 01       	movw	r24, r18
     ce6:	cc 59       	subi	r28, 0x9C	; 156
     ce8:	df 4f       	sbci	r29, 0xFF	; 255
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <rgb_retrieve>:




int rgb_retrieve(int *a,int *b,int *c)
{
     cfe:	8f 92       	push	r8
     d00:	9f 92       	push	r9
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	ce 56       	subi	r28, 0x6E	; 110
     d1c:	d0 40       	sbci	r29, 0x00	; 0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	6c 01       	movw	r12, r24
     d2a:	5b 01       	movw	r10, r22
     d2c:	4a 01       	movw	r8, r20
char responsex[20];
char buff[80];
char resultx[10];

sprintf(buff,"http://api.clobous.com/%s/data/retrieve?r&g&b",cloudid);
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <rgb_retrieve+0x32>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <rgb_retrieve+0x34>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <rgb_retrieve+0x36>
     d34:	ed b7       	in	r30, 0x3d	; 61
     d36:	fe b7       	in	r31, 0x3e	; 62
     d38:	31 96       	adiw	r30, 0x01	; 1
     d3a:	8e 01       	movw	r16, r28
     d3c:	01 5e       	subi	r16, 0xE1	; 225
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	ad b7       	in	r26, 0x3d	; 61
     d42:	be b7       	in	r27, 0x3e	; 62
     d44:	12 96       	adiw	r26, 0x02	; 2
     d46:	1c 93       	st	X, r17
     d48:	0e 93       	st	-X, r16
     d4a:	11 97       	sbiw	r26, 0x01	; 1
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	93 83       	std	Z+3, r25	; 0x03
     d52:	82 83       	std	Z+2, r24	; 0x02
     d54:	8c e8       	ldi	r24, 0x8C	; 140
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	95 83       	std	Z+5, r25	; 0x05
     d5a:	84 83       	std	Z+4, r24	; 0x04
     d5c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
#if(INTERNET==1)

wifi_http(buff,responsex);
     d60:	ed b7       	in	r30, 0x3d	; 61
     d62:	fe b7       	in	r31, 0x3e	; 62
     d64:	36 96       	adiw	r30, 0x06	; 6
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	fe bf       	out	0x3e, r31	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	ed bf       	out	0x3d, r30	; 61
     d70:	7b e0       	ldi	r23, 0x0B	; 11
     d72:	e7 2e       	mov	r14, r23
     d74:	f1 2c       	mov	r15, r1
     d76:	ec 0e       	add	r14, r28
     d78:	fd 1e       	adc	r15, r29
     d7a:	c8 01       	movw	r24, r16
     d7c:	b7 01       	movw	r22, r14
     d7e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <wifi_http>

#if(INTERNET==2)
 gprs_http((buff),responsex);
#endif

		jsonparser(responsex,"r",resultx);
     d82:	c7 01       	movw	r24, r14
     d84:	60 e3       	ldi	r22, 0x30	; 48
     d86:	71 e0       	ldi	r23, 0x01	; 1
     d88:	8e 01       	movw	r16, r28
     d8a:	0f 5f       	subi	r16, 0xFF	; 255
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	a8 01       	movw	r20, r16
     d90:	0e 94 b8 0a 	call	0x1570	; 0x1570 <jsonparser>
	
	   *a=  atoi(resultx);
     d94:	c8 01       	movw	r24, r16
     d96:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <atoi>
     d9a:	d6 01       	movw	r26, r12
     d9c:	8d 93       	st	X+, r24
     d9e:	9c 93       	st	X, r25
	   
	  
	   
	   jsonparser(responsex,"g",resultx);
     da0:	c7 01       	movw	r24, r14
     da2:	62 e3       	ldi	r22, 0x32	; 50
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	a8 01       	movw	r20, r16
     da8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <jsonparser>
	
	   *b=  atoi(resultx);
     dac:	c8 01       	movw	r24, r16
     dae:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <atoi>
     db2:	f5 01       	movw	r30, r10
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
	   
	 
	   
	   jsonparser(responsex,"b",resultx);
     db8:	c7 01       	movw	r24, r14
     dba:	64 e3       	ldi	r22, 0x34	; 52
     dbc:	71 e0       	ldi	r23, 0x01	; 1
     dbe:	a8 01       	movw	r20, r16
     dc0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <jsonparser>
	
	   *c =  atoi(resultx);   
     dc4:	c8 01       	movw	r24, r16
     dc6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <atoi>
     dca:	d4 01       	movw	r26, r8
     dcc:	8d 93       	st	X+, r24
     dce:	9c 93       	st	X, r25
	


        return 1;

}
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	c2 59       	subi	r28, 0x92	; 146
     dd6:	df 4f       	sbci	r29, 0xFF	; 255
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	9f 90       	pop	r9
     df8:	8f 90       	pop	r8
     dfa:	08 95       	ret

00000dfc <data_retrievex>:




int data_retrievex(char *name)
{
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	ce 56       	subi	r28, 0x6E	; 110
     e12:	d0 40       	sbci	r29, 0x00	; 0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	6c 01       	movw	r12, r24
char responsex[20];
char buff[80];
char resultx[10];

sprintf(buff,"http://api.clobous.com/%s/data/retrieve?%s",cloudid,name);
     e20:	8d b7       	in	r24, 0x3d	; 61
     e22:	9e b7       	in	r25, 0x3e	; 62
     e24:	08 97       	sbiw	r24, 0x08	; 8
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	9e bf       	out	0x3e, r25	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	8d bf       	out	0x3d, r24	; 61
     e30:	ed b7       	in	r30, 0x3d	; 61
     e32:	fe b7       	in	r31, 0x3e	; 62
     e34:	31 96       	adiw	r30, 0x01	; 1
     e36:	af e1       	ldi	r26, 0x1F	; 31
     e38:	ea 2e       	mov	r14, r26
     e3a:	f1 2c       	mov	r15, r1
     e3c:	ec 0e       	add	r14, r28
     e3e:	fd 1e       	adc	r15, r29
     e40:	ad b7       	in	r26, 0x3d	; 61
     e42:	be b7       	in	r27, 0x3e	; 62
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	fc 92       	st	X, r15
     e48:	ee 92       	st	-X, r14
     e4a:	11 97       	sbiw	r26, 0x01	; 1
     e4c:	86 e3       	ldi	r24, 0x36	; 54
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	93 83       	std	Z+3, r25	; 0x03
     e52:	82 83       	std	Z+2, r24	; 0x02
     e54:	8c e8       	ldi	r24, 0x8C	; 140
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	95 83       	std	Z+5, r25	; 0x05
     e5a:	84 83       	std	Z+4, r24	; 0x04
     e5c:	d7 82       	std	Z+7, r13	; 0x07
     e5e:	c6 82       	std	Z+6, r12	; 0x06
     e60:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
#if(INTERNET==1)

wifi_http(buff,responsex);
     e64:	8d b7       	in	r24, 0x3d	; 61
     e66:	9e b7       	in	r25, 0x3e	; 62
     e68:	08 96       	adiw	r24, 0x08	; 8
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	9e bf       	out	0x3e, r25	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	8d bf       	out	0x3d, r24	; 61
     e74:	8e 01       	movw	r16, r28
     e76:	05 5f       	subi	r16, 0xF5	; 245
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	c7 01       	movw	r24, r14
     e7c:	b8 01       	movw	r22, r16
     e7e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <wifi_http>

#if(INTERNET==2)
 gprs_http((buff),responsex);
#endif

		jsonparser(responsex,name,resultx);
     e82:	c8 01       	movw	r24, r16
     e84:	b6 01       	movw	r22, r12
     e86:	8e 01       	movw	r16, r28
     e88:	0f 5f       	subi	r16, 0xFF	; 255
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	a8 01       	movw	r20, r16
     e8e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <jsonparser>


        return atoi(resultx);
     e92:	c8 01       	movw	r24, r16
     e94:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <atoi>

}
     e98:	c2 59       	subi	r28, 0x92	; 146
     e9a:	df 4f       	sbci	r29, 0xFF	; 255
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	08 95       	ret

00000eb8 <data_retrieve>:



void data_retrieve(char *name,char *valuex)
{
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	ce 56       	subi	r28, 0x6E	; 110
     ed2:	d0 40       	sbci	r29, 0x00	; 0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	6c 01       	movw	r12, r24
     ee0:	5b 01       	movw	r10, r22
char responsex[20];
char buff[80];
char resultx[10];

sprintf(buff,"http://api.clobous.com/%s/data/retrieve?%s",cloudid,name);
     ee2:	8d b7       	in	r24, 0x3d	; 61
     ee4:	9e b7       	in	r25, 0x3e	; 62
     ee6:	08 97       	sbiw	r24, 0x08	; 8
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	9e bf       	out	0x3e, r25	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	8d bf       	out	0x3d, r24	; 61
     ef2:	ed b7       	in	r30, 0x3d	; 61
     ef4:	fe b7       	in	r31, 0x3e	; 62
     ef6:	31 96       	adiw	r30, 0x01	; 1
     ef8:	bf e1       	ldi	r27, 0x1F	; 31
     efa:	eb 2e       	mov	r14, r27
     efc:	f1 2c       	mov	r15, r1
     efe:	ec 0e       	add	r14, r28
     f00:	fd 1e       	adc	r15, r29
     f02:	ad b7       	in	r26, 0x3d	; 61
     f04:	be b7       	in	r27, 0x3e	; 62
     f06:	12 96       	adiw	r26, 0x02	; 2
     f08:	fc 92       	st	X, r15
     f0a:	ee 92       	st	-X, r14
     f0c:	11 97       	sbiw	r26, 0x01	; 1
     f0e:	86 e3       	ldi	r24, 0x36	; 54
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	93 83       	std	Z+3, r25	; 0x03
     f14:	82 83       	std	Z+2, r24	; 0x02
     f16:	8c e8       	ldi	r24, 0x8C	; 140
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	95 83       	std	Z+5, r25	; 0x05
     f1c:	84 83       	std	Z+4, r24	; 0x04
     f1e:	d7 82       	std	Z+7, r13	; 0x07
     f20:	c6 82       	std	Z+6, r12	; 0x06
     f22:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
#if(INTERNET==1)

wifi_http(buff,responsex);
     f26:	8d b7       	in	r24, 0x3d	; 61
     f28:	9e b7       	in	r25, 0x3e	; 62
     f2a:	08 96       	adiw	r24, 0x08	; 8
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	9e bf       	out	0x3e, r25	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	8d bf       	out	0x3d, r24	; 61
     f36:	8e 01       	movw	r16, r28
     f38:	05 5f       	subi	r16, 0xF5	; 245
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	c7 01       	movw	r24, r14
     f3e:	b8 01       	movw	r22, r16
     f40:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <wifi_http>

#if(INTERNET==2)
 gprs_http((buff),responsex);
#endif

		jsonparser(responsex,name,resultx);
     f44:	c8 01       	movw	r24, r16
     f46:	b6 01       	movw	r22, r12
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5f       	subi	r16, 0xFF	; 255
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	a8 01       	movw	r20, r16
     f50:	0e 94 b8 0a 	call	0x1570	; 0x1570 <jsonparser>

       strcpy(valuex,resultx);
     f54:	c5 01       	movw	r24, r10
     f56:	b8 01       	movw	r22, r16
     f58:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <strcpy>
        
		

}
     f5c:	c2 59       	subi	r28, 0x92	; 146
     f5e:	df 4f       	sbci	r29, 0xFF	; 255
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	08 95       	ret

00000f80 <serial_num>:

void serial_num(int num)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	27 97       	sbiw	r28, 0x07	; 7
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 itoa( num , buffer, 10);
     f98:	8e 01       	movw	r16, r28
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	b8 01       	movw	r22, r16
     fa0:	4a e0       	ldi	r20, 0x0A	; 10
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <itoa>
    serial_string(buffer);
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
}
     fae:	27 96       	adiw	r28, 0x07	; 7
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <complete_setup>:
}

void complete_setup()
{

	lcd_init();
     fc4:	0e 94 04 03 	call	0x608	; 0x608 <lcd_init>
	lcd_string("Google_Assistance");
     fc8:	81 e6       	ldi	r24, 0x61	; 97
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
     fd0:	80 e1       	ldi	r24, 0x10	; 16
     fd2:	97 e2       	ldi	r25, 0x27	; 39
     fd4:	20 e9       	ldi	r18, 0x90	; 144
     fd6:	31 e0       	ldi	r19, 0x01	; 1
     fd8:	f9 01       	movw	r30, r18
     fda:	31 97       	sbiw	r30, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <complete_setup+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	d9 f7       	brne	.-10     	; 0xfd8 <complete_setup+0x14>
	_delay_ms(1000);
	serial_init(9600);
     fe2:	80 e8       	ldi	r24, 0x80	; 128
     fe4:	95 e2       	ldi	r25, 0x25	; 37
     fe6:	0e 94 55 00 	call	0xaa	; 0xaa <serial_init>
	serial_select(2);
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 8e 0a 	call	0x151c	; 0x151c <serial_select>
	wifi_init();
     ff2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <wifi_init>
}
     ff6:	08 95       	ret

00000ff8 <main>:
#include "clobous.h"
#include "DS18B20.h"
#include "lcd.h"

int main()
{
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	complete_setup();
    1000:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <complete_setup>
	wifi_connect("asus","asus1234");
    1004:	83 e7       	ldi	r24, 0x73	; 115
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	68 e7       	ldi	r22, 0x78	; 120
    100a:	71 e0       	ldi	r23, 0x01	; 1
    100c:	0e 94 a7 0b 	call	0x174e	; 0x174e <wifi_connect>
    lcd_string("wifi cntd");
    1010:	81 e8       	ldi	r24, 0x81	; 129
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
    1018:	80 e1       	ldi	r24, 0x10	; 16
    101a:	97 e2       	ldi	r25, 0x27	; 39
    101c:	20 e9       	ldi	r18, 0x90	; 144
    101e:	31 e0       	ldi	r19, 0x01	; 1
    1020:	f9 01       	movw	r30, r18
    1022:	31 97       	sbiw	r30, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1026:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1028:	d9 f7       	brne	.-10     	; 0x1020 <main+0x28>


void ds18b_init(unsigned char port,unsigned char bit)
{

pds18 = port;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 da 01 	sts	0x01DA, r24
bds18 = bit;
    1030:	10 92 db 01 	sts	0x01DB, r1
init_ds18b20();
    1034:	0e 94 50 04 	call	0x8a0	; 0x8a0 <init_ds18b20>
	int a;
	while (1)
	{
	
	    
		data_retrieve("vr",data);
    1038:	8b e8       	ldi	r24, 0x8B	; 139
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	6d ed       	ldi	r22, 0xDD	; 221
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <data_retrieve>
		lcd_clear();
    1044:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_clear>
		lcd_string(data);
    1048:	8d ed       	ldi	r24, 0xDD	; 221
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
		if(compare(data,"manual"))
    1050:	8d ed       	ldi	r24, 0xDD	; 221
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	6e e8       	ldi	r22, 0x8E	; 142
    1056:	71 e0       	ldi	r23, 0x01	; 1
    1058:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    105c:	89 2b       	or	r24, r25
    105e:	09 f4       	brne	.+2      	; 0x1062 <main+0x6a>
    1060:	4f c0       	rjmp	.+158    	; 0x1100 <main+0x108>
		{
			while(1)
			{
				data_retrieve("vr",data);
    1062:	8b e8       	ldi	r24, 0x8B	; 139
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	6d ed       	ldi	r22, 0xDD	; 221
    1068:	71 e0       	ldi	r23, 0x01	; 1
    106a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <data_retrieve>
				lcd_clear();
    106e:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_clear>
				lcd_string(data);
    1072:	8d ed       	ldi	r24, 0xDD	; 221
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
				if(compare(data,"auto"))
    107a:	8d ed       	ldi	r24, 0xDD	; 221
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	65 e9       	ldi	r22, 0x95	; 149
    1080:	71 e0       	ldi	r23, 0x01	; 1
    1082:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    1086:	89 2b       	or	r24, r25
    1088:	91 f5       	brne	.+100    	; 0x10ee <main+0xf6>
				{
					break;
				}
				if(compare(data,"slow")||compare(data,"fan_on"))
    108a:	8d ed       	ldi	r24, 0xDD	; 221
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	6a e9       	ldi	r22, 0x9A	; 154
    1090:	71 e0       	ldi	r23, 0x01	; 1
    1092:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    1096:	89 2b       	or	r24, r25
    1098:	41 f4       	brne	.+16     	; 0x10aa <main+0xb2>
    109a:	8d ed       	ldi	r24, 0xDD	; 221
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	6f e9       	ldi	r22, 0x9F	; 159
    10a0:	71 e0       	ldi	r23, 0x01	; 1
    10a2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    10a6:	89 2b       	or	r24, r25
    10a8:	11 f0       	breq	.+4      	; 0x10ae <main+0xb6>
				{
					
					slow();
    10aa:	0e 94 1d 05 	call	0xa3a	; 0xa3a <slow>
				}	
			
			
				if(compare(data,"medium"))
    10ae:	8d ed       	ldi	r24, 0xDD	; 221
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	66 ea       	ldi	r22, 0xA6	; 166
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    10ba:	89 2b       	or	r24, r25
    10bc:	11 f0       	breq	.+4      	; 0x10c2 <main+0xca>
				{
					
					medium();
    10be:	0e 94 04 05 	call	0xa08	; 0xa08 <medium>
				}
			
				if(compare(data,"fast"))
    10c2:	8d ed       	ldi	r24, 0xDD	; 221
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	6d ea       	ldi	r22, 0xAD	; 173
    10c8:	71 e0       	ldi	r23, 0x01	; 1
    10ca:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    10ce:	89 2b       	or	r24, r25
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <main+0xde>
				{
					
					fast();
    10d2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <fast>
				}
				
			
				if(compare(data,"fan_off"))
    10d6:	8d ed       	ldi	r24, 0xDD	; 221
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	62 eb       	ldi	r22, 0xB2	; 178
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    10e2:	89 2b       	or	r24, r25
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <main+0xf0>
    10e6:	bd cf       	rjmp	.-134    	; 0x1062 <main+0x6a>
				{
					
					fan_off();
    10e8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fan_off>
    10ec:	ba cf       	rjmp	.-140    	; 0x1062 <main+0x6a>
				}
				
			}
			wifi_connect("asus","asus1234");
    10ee:	83 e7       	ldi	r24, 0x73	; 115
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	68 e7       	ldi	r22, 0x78	; 120
    10f4:	71 e0       	ldi	r23, 0x01	; 1
    10f6:	0e 94 a7 0b 	call	0x174e	; 0x174e <wifi_connect>
			 fan_off();
    10fa:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fan_off>
    10fe:	5e c0       	rjmp	.+188    	; 0x11bc <main+0x1c4>
		}
		
		
		
		
		if(compare(data,"auto"))
    1100:	8d ed       	ldi	r24, 0xDD	; 221
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	65 e9       	ldi	r22, 0x95	; 149
    1106:	71 e0       	ldi	r23, 0x01	; 1
    1108:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    110c:	89 2b       	or	r24, r25
    110e:	09 f4       	brne	.+2      	; 0x1112 <main+0x11a>
    1110:	93 cf       	rjmp	.-218    	; 0x1038 <main+0x40>
    1112:	00 e9       	ldi	r16, 0x90	; 144
    1114:	11 e0       	ldi	r17, 0x01	; 1
		{
			while(1)
			{
				data_retrieve("vr",data);
    1116:	8b e8       	ldi	r24, 0x8B	; 139
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	6d ed       	ldi	r22, 0xDD	; 221
    111c:	71 e0       	ldi	r23, 0x01	; 1
    111e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <data_retrieve>
				lcd_clear();
    1122:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_clear>
				lcd_string(data);
    1126:	8d ed       	ldi	r24, 0xDD	; 221
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
				if(compare(data,"manual"))
    112e:	8d ed       	ldi	r24, 0xDD	; 221
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	6e e8       	ldi	r22, 0x8E	; 142
    1134:	71 e0       	ldi	r23, 0x01	; 1
    1136:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <compare>
    113a:	89 2b       	or	r24, r25
    113c:	b9 f5       	brne	.+110    	; 0x11ac <main+0x1b4>
				{
					break;
				}
				lcd_clear();
    113e:	0e 94 bf 02 	call	0x57e	; 0x57e <lcd_clear>
				a=read_temp();
    1142:	0e 94 9c 04 	call	0x938	; 0x938 <read_temp>
    1146:	c8 2f       	mov	r28, r24
    1148:	d0 e0       	ldi	r29, 0x00	; 0
				lcd_string("temp=");
    114a:	8a eb       	ldi	r24, 0xBA	; 186
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
				lcd_gotoxy(5,0);
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 b3 02 	call	0x566	; 0x566 <lcd_gotoxy>
				lcd_num(a);
    115a:	be 01       	movw	r22, r28
    115c:	88 27       	eor	r24, r24
    115e:	77 fd       	sbrc	r23, 7
    1160:	80 95       	com	r24
    1162:	98 2f       	mov	r25, r24
    1164:	0e 94 3b 03 	call	0x676	; 0x676 <lcd_num>
				lcd_string("*");
    1168:	80 ec       	ldi	r24, 0xC0	; 192
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_string>
    1170:	80 ed       	ldi	r24, 0xD0	; 208
    1172:	97 e0       	ldi	r25, 0x07	; 7
    1174:	f8 01       	movw	r30, r16
    1176:	31 97       	sbiw	r30, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <main+0x17e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117c:	d9 f7       	brne	.-10     	; 0x1174 <main+0x17c>
				_delay_ms(200);
				if(a<27)
    117e:	cb 31       	cpi	r28, 0x1B	; 27
    1180:	d1 05       	cpc	r29, r1
    1182:	14 f4       	brge	.+4      	; 0x1188 <main+0x190>
				{
						 fan_off();
    1184:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fan_off>
				}
				
				if((a>=27)&&(a<28))
    1188:	cb 31       	cpi	r28, 0x1B	; 27
    118a:	d1 05       	cpc	r29, r1
    118c:	19 f4       	brne	.+6      	; 0x1194 <main+0x19c>
				{
						slow();
    118e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <slow>
    1192:	c1 cf       	rjmp	.-126    	; 0x1116 <main+0x11e>
				}
			
				if((a>=29)&&(a<30))
    1194:	cd 31       	cpi	r28, 0x1D	; 29
    1196:	d1 05       	cpc	r29, r1
    1198:	19 f4       	brne	.+6      	; 0x11a0 <main+0x1a8>
				{
						medium();
    119a:	0e 94 04 05 	call	0xa08	; 0xa08 <medium>
    119e:	bb cf       	rjmp	.-138    	; 0x1116 <main+0x11e>
				}
				if(a>=30)
    11a0:	6e 97       	sbiw	r28, 0x1e	; 30
    11a2:	0c f4       	brge	.+2      	; 0x11a6 <main+0x1ae>
    11a4:	b8 cf       	rjmp	.-144    	; 0x1116 <main+0x11e>
				{
						 fast();
    11a6:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <fast>
    11aa:	b5 cf       	rjmp	.-150    	; 0x1116 <main+0x11e>
				}
	
				}
				
			 fan_off();	
    11ac:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fan_off>
			 wifi_connect("asus","asus1234");
    11b0:	83 e7       	ldi	r24, 0x73	; 115
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	68 e7       	ldi	r22, 0x78	; 120
    11b6:	71 e0       	ldi	r23, 0x01	; 1
    11b8:	0e 94 a7 0b 	call	0x174e	; 0x174e <wifi_connect>
			return 0;
		}
		
	}	

    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <read>:
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	f9 f0       	breq	.+62     	; 0x120c <read+0x42>
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	18 f4       	brcc	.+6      	; 0x11d8 <read+0xe>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	31 f4       	brne	.+12     	; 0x11e2 <read+0x18>
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <read+0x1c>
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	59 f1       	breq	.+86     	; 0x1232 <read+0x68>
    11dc:	84 30       	cpi	r24, 0x04	; 4
    11de:	09 f4       	brne	.+2      	; 0x11e2 <read+0x18>
    11e0:	42 c0       	rjmp	.+132    	; 0x1266 <read+0x9c>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	08 95       	ret
    11e6:	69 30       	cpi	r22, 0x09	; 9
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <read+0x26>
    11ea:	1a ba       	out	0x1a, r1	; 26
    11ec:	89 b3       	in	r24, 0x19	; 25
    11ee:	08 95       	ret
    11f0:	8a b3       	in	r24, 0x1a	; 26
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	06 2e       	mov	r0, r22
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <read+0x34>
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <read+0x30>
    1202:	20 95       	com	r18
    1204:	28 23       	and	r18, r24
    1206:	2a bb       	out	0x1a, r18	; 26
    1208:	89 b3       	in	r24, 0x19	; 25
    120a:	25 c0       	rjmp	.+74     	; 0x1256 <read+0x8c>
    120c:	69 30       	cpi	r22, 0x09	; 9
    120e:	19 f4       	brne	.+6      	; 0x1216 <read+0x4c>
    1210:	17 ba       	out	0x17, r1	; 23
    1212:	86 b3       	in	r24, 0x16	; 22
    1214:	08 95       	ret
    1216:	87 b3       	in	r24, 0x17	; 23
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	06 2e       	mov	r0, r22
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <read+0x5a>
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <read+0x56>
    1228:	20 95       	com	r18
    122a:	28 23       	and	r18, r24
    122c:	27 bb       	out	0x17, r18	; 23
    122e:	86 b3       	in	r24, 0x16	; 22
    1230:	12 c0       	rjmp	.+36     	; 0x1256 <read+0x8c>
    1232:	69 30       	cpi	r22, 0x09	; 9
    1234:	19 f4       	brne	.+6      	; 0x123c <read+0x72>
    1236:	14 ba       	out	0x14, r1	; 20
    1238:	83 b3       	in	r24, 0x13	; 19
    123a:	08 95       	ret
    123c:	84 b3       	in	r24, 0x14	; 20
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	06 2e       	mov	r0, r22
    1244:	02 c0       	rjmp	.+4      	; 0x124a <read+0x80>
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <read+0x7c>
    124e:	20 95       	com	r18
    1250:	28 23       	and	r18, r24
    1252:	24 bb       	out	0x14, r18	; 20
    1254:	83 b3       	in	r24, 0x13	; 19
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <read+0x94>
    125a:	95 95       	asr	r25
    125c:	87 95       	ror	r24
    125e:	6a 95       	dec	r22
    1260:	e2 f7       	brpl	.-8      	; 0x125a <read+0x90>
    1262:	81 70       	andi	r24, 0x01	; 1
    1264:	08 95       	ret
    1266:	69 30       	cpi	r22, 0x09	; 9
    1268:	19 f4       	brne	.+6      	; 0x1270 <read+0xa6>
    126a:	11 ba       	out	0x11, r1	; 17
    126c:	80 b3       	in	r24, 0x10	; 16
    126e:	08 95       	ret
    1270:	31 b3       	in	r19, 0x11	; 17
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	06 2e       	mov	r0, r22
    1278:	02 c0       	rjmp	.+4      	; 0x127e <read+0xb4>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <read+0xb0>
    1282:	28 2f       	mov	r18, r24
    1284:	20 95       	com	r18
    1286:	23 23       	and	r18, r19
    1288:	21 bb       	out	0x11, r18	; 17
    128a:	22 b3       	in	r18, 0x12	; 18
    128c:	82 2b       	or	r24, r18
    128e:	82 bb       	out	0x12, r24	; 18
    1290:	80 b3       	in	r24, 0x10	; 16
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <read+0xd0>
    1296:	95 95       	asr	r25
    1298:	87 95       	ror	r24
    129a:	6a 95       	dec	r22
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <read+0xcc>
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	08 95       	ret

000012a2 <write>:
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <write+0x6>
    12a6:	41 c0       	rjmp	.+130    	; 0x132a <write+0x88>
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	20 f4       	brcc	.+8      	; 0x12b4 <write+0x12>
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <write+0x10>
    12b0:	d7 c0       	rjmp	.+430    	; 0x1460 <write+0x1be>
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <write+0x20>
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	09 f4       	brne	.+2      	; 0x12ba <write+0x18>
    12b8:	6c c0       	rjmp	.+216    	; 0x1392 <write+0xf0>
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <write+0x1e>
    12be:	d0 c0       	rjmp	.+416    	; 0x1460 <write+0x1be>
    12c0:	9c c0       	rjmp	.+312    	; 0x13fa <write+0x158>
    12c2:	6b 35       	cpi	r22, 0x5B	; 91
    12c4:	21 f4       	brne	.+8      	; 0x12ce <write+0x2c>
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	8a bb       	out	0x1a, r24	; 26
    12ca:	4b bb       	out	0x1b, r20	; 27
    12cc:	08 95       	ret
    12ce:	44 23       	and	r20, r20
    12d0:	21 f0       	breq	.+8      	; 0x12da <write+0x38>
    12d2:	41 30       	cpi	r20, 0x01	; 1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <write+0x36>
    12d6:	c4 c0       	rjmp	.+392    	; 0x1460 <write+0x1be>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <write+0x60>
    12da:	69 30       	cpi	r22, 0x09	; 9
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <write+0x44>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	8a bb       	out	0x1a, r24	; 26
    12e2:	1b ba       	out	0x1b, r1	; 27
    12e4:	08 95       	ret
    12e6:	8a b3       	in	r24, 0x1a	; 26
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <write+0x50>
    12ee:	22 0f       	add	r18, r18
    12f0:	33 1f       	adc	r19, r19
    12f2:	6a 95       	dec	r22
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <write+0x4c>
    12f6:	82 2b       	or	r24, r18
    12f8:	8a bb       	out	0x1a, r24	; 26
    12fa:	8b b3       	in	r24, 0x1b	; 27
    12fc:	20 95       	com	r18
    12fe:	28 23       	and	r18, r24
    1300:	12 c0       	rjmp	.+36     	; 0x1326 <write+0x84>
    1302:	69 30       	cpi	r22, 0x09	; 9
    1304:	21 f4       	brne	.+8      	; 0x130e <write+0x6c>
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	8a bb       	out	0x1a, r24	; 26
    130a:	8b bb       	out	0x1b, r24	; 27
    130c:	08 95       	ret
    130e:	8a b3       	in	r24, 0x1a	; 26
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	02 c0       	rjmp	.+4      	; 0x131a <write+0x78>
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	6a 95       	dec	r22
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <write+0x74>
    131e:	82 2b       	or	r24, r18
    1320:	8a bb       	out	0x1a, r24	; 26
    1322:	8b b3       	in	r24, 0x1b	; 27
    1324:	28 2b       	or	r18, r24
    1326:	2b bb       	out	0x1b, r18	; 27
    1328:	08 95       	ret
    132a:	6b 35       	cpi	r22, 0x5B	; 91
    132c:	21 f4       	brne	.+8      	; 0x1336 <write+0x94>
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	87 bb       	out	0x17, r24	; 23
    1332:	48 bb       	out	0x18, r20	; 24
    1334:	08 95       	ret
    1336:	44 23       	and	r20, r20
    1338:	21 f0       	breq	.+8      	; 0x1342 <write+0xa0>
    133a:	41 30       	cpi	r20, 0x01	; 1
    133c:	09 f0       	breq	.+2      	; 0x1340 <write+0x9e>
    133e:	90 c0       	rjmp	.+288    	; 0x1460 <write+0x1be>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <write+0xc8>
    1342:	69 30       	cpi	r22, 0x09	; 9
    1344:	21 f4       	brne	.+8      	; 0x134e <write+0xac>
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	87 bb       	out	0x17, r24	; 23
    134a:	18 ba       	out	0x18, r1	; 24
    134c:	08 95       	ret
    134e:	87 b3       	in	r24, 0x17	; 23
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	02 c0       	rjmp	.+4      	; 0x135a <write+0xb8>
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	6a 95       	dec	r22
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <write+0xb4>
    135e:	82 2b       	or	r24, r18
    1360:	87 bb       	out	0x17, r24	; 23
    1362:	88 b3       	in	r24, 0x18	; 24
    1364:	20 95       	com	r18
    1366:	28 23       	and	r18, r24
    1368:	12 c0       	rjmp	.+36     	; 0x138e <write+0xec>
    136a:	69 30       	cpi	r22, 0x09	; 9
    136c:	21 f4       	brne	.+8      	; 0x1376 <write+0xd4>
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    1370:	87 bb       	out	0x17, r24	; 23
    1372:	88 bb       	out	0x18, r24	; 24
    1374:	08 95       	ret
    1376:	87 b3       	in	r24, 0x17	; 23
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <write+0xe0>
    137e:	22 0f       	add	r18, r18
    1380:	33 1f       	adc	r19, r19
    1382:	6a 95       	dec	r22
    1384:	e2 f7       	brpl	.-8      	; 0x137e <write+0xdc>
    1386:	82 2b       	or	r24, r18
    1388:	87 bb       	out	0x17, r24	; 23
    138a:	88 b3       	in	r24, 0x18	; 24
    138c:	28 2b       	or	r18, r24
    138e:	28 bb       	out	0x18, r18	; 24
    1390:	08 95       	ret
    1392:	6b 35       	cpi	r22, 0x5B	; 91
    1394:	21 f4       	brne	.+8      	; 0x139e <write+0xfc>
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	84 bb       	out	0x14, r24	; 20
    139a:	45 bb       	out	0x15, r20	; 21
    139c:	08 95       	ret
    139e:	44 23       	and	r20, r20
    13a0:	21 f0       	breq	.+8      	; 0x13aa <write+0x108>
    13a2:	41 30       	cpi	r20, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <write+0x106>
    13a6:	5c c0       	rjmp	.+184    	; 0x1460 <write+0x1be>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <write+0x130>
    13aa:	69 30       	cpi	r22, 0x09	; 9
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <write+0x114>
    13ae:	8f ef       	ldi	r24, 0xFF	; 255
    13b0:	84 bb       	out	0x14, r24	; 20
    13b2:	15 ba       	out	0x15, r1	; 21
    13b4:	08 95       	ret
    13b6:	84 b3       	in	r24, 0x14	; 20
    13b8:	21 e0       	ldi	r18, 0x01	; 1
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <write+0x120>
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	6a 95       	dec	r22
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <write+0x11c>
    13c6:	82 2b       	or	r24, r18
    13c8:	84 bb       	out	0x14, r24	; 20
    13ca:	85 b3       	in	r24, 0x15	; 21
    13cc:	20 95       	com	r18
    13ce:	28 23       	and	r18, r24
    13d0:	12 c0       	rjmp	.+36     	; 0x13f6 <write+0x154>
    13d2:	69 30       	cpi	r22, 0x09	; 9
    13d4:	21 f4       	brne	.+8      	; 0x13de <write+0x13c>
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	84 bb       	out	0x14, r24	; 20
    13da:	85 bb       	out	0x15, r24	; 21
    13dc:	08 95       	ret
    13de:	84 b3       	in	r24, 0x14	; 20
    13e0:	21 e0       	ldi	r18, 0x01	; 1
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <write+0x148>
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	6a 95       	dec	r22
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <write+0x144>
    13ee:	82 2b       	or	r24, r18
    13f0:	84 bb       	out	0x14, r24	; 20
    13f2:	85 b3       	in	r24, 0x15	; 21
    13f4:	28 2b       	or	r18, r24
    13f6:	25 bb       	out	0x15, r18	; 21
    13f8:	08 95       	ret
    13fa:	6b 35       	cpi	r22, 0x5B	; 91
    13fc:	21 f4       	brne	.+8      	; 0x1406 <write+0x164>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	81 bb       	out	0x11, r24	; 17
    1402:	42 bb       	out	0x12, r20	; 18
    1404:	08 95       	ret
    1406:	44 23       	and	r20, r20
    1408:	19 f0       	breq	.+6      	; 0x1410 <write+0x16e>
    140a:	41 30       	cpi	r20, 0x01	; 1
    140c:	49 f5       	brne	.+82     	; 0x1460 <write+0x1be>
    140e:	15 c0       	rjmp	.+42     	; 0x143a <write+0x198>
    1410:	69 30       	cpi	r22, 0x09	; 9
    1412:	21 f4       	brne	.+8      	; 0x141c <write+0x17a>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	81 bb       	out	0x11, r24	; 17
    1418:	12 ba       	out	0x12, r1	; 18
    141a:	08 95       	ret
    141c:	81 b3       	in	r24, 0x11	; 17
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <write+0x186>
    1424:	22 0f       	add	r18, r18
    1426:	33 1f       	adc	r19, r19
    1428:	6a 95       	dec	r22
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <write+0x182>
    142c:	82 2b       	or	r24, r18
    142e:	81 bb       	out	0x11, r24	; 17
    1430:	82 b3       	in	r24, 0x12	; 18
    1432:	20 95       	com	r18
    1434:	28 23       	and	r18, r24
    1436:	22 bb       	out	0x12, r18	; 18
    1438:	08 95       	ret
    143a:	69 30       	cpi	r22, 0x09	; 9
    143c:	21 f4       	brne	.+8      	; 0x1446 <write+0x1a4>
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	81 bb       	out	0x11, r24	; 17
    1442:	82 bb       	out	0x12, r24	; 18
    1444:	08 95       	ret
    1446:	81 b3       	in	r24, 0x11	; 17
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <write+0x1b0>
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	6a 95       	dec	r22
    1454:	e2 f7       	brpl	.-8      	; 0x144e <write+0x1ac>
    1456:	82 2b       	or	r24, r18
    1458:	81 bb       	out	0x11, r24	; 17
    145a:	82 b3       	in	r24, 0x12	; 18
    145c:	28 2b       	or	r18, r24
    145e:	22 bb       	out	0x12, r18	; 18
    1460:	08 95       	ret

00001462 <direction>:
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	19 f1       	breq	.+70     	; 0x14ac <direction+0x4a>
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	09 f4       	brne	.+2      	; 0x146c <direction+0xa>
    146a:	3c c0       	rjmp	.+120    	; 0x14e4 <direction+0x82>
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	09 f0       	breq	.+2      	; 0x1472 <direction+0x10>
    1470:	54 c0       	rjmp	.+168    	; 0x151a <direction+0xb8>
    1472:	44 23       	and	r20, r20
    1474:	21 f0       	breq	.+8      	; 0x147e <direction+0x1c>
    1476:	41 30       	cpi	r20, 0x01	; 1
    1478:	09 f0       	breq	.+2      	; 0x147c <direction+0x1a>
    147a:	4f c0       	rjmp	.+158    	; 0x151a <direction+0xb8>
    147c:	0c c0       	rjmp	.+24     	; 0x1496 <direction+0x34>
    147e:	27 b3       	in	r18, 0x17	; 23
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <direction+0x28>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	6a 95       	dec	r22
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <direction+0x24>
    148e:	80 95       	com	r24
    1490:	82 23       	and	r24, r18
    1492:	87 bb       	out	0x17, r24	; 23
    1494:	08 95       	ret
    1496:	27 b3       	in	r18, 0x17	; 23
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <direction+0x40>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	6a 95       	dec	r22
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <direction+0x3c>
    14a6:	28 2b       	or	r18, r24
    14a8:	27 bb       	out	0x17, r18	; 23
    14aa:	08 95       	ret
    14ac:	44 23       	and	r20, r20
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <direction+0x54>
    14b0:	41 30       	cpi	r20, 0x01	; 1
    14b2:	99 f5       	brne	.+102    	; 0x151a <direction+0xb8>
    14b4:	0c c0       	rjmp	.+24     	; 0x14ce <direction+0x6c>
    14b6:	24 b3       	in	r18, 0x14	; 20
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <direction+0x60>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	6a 95       	dec	r22
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <direction+0x5c>
    14c6:	80 95       	com	r24
    14c8:	82 23       	and	r24, r18
    14ca:	84 bb       	out	0x14, r24	; 20
    14cc:	08 95       	ret
    14ce:	24 b3       	in	r18, 0x14	; 20
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <direction+0x78>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	6a 95       	dec	r22
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <direction+0x74>
    14de:	28 2b       	or	r18, r24
    14e0:	24 bb       	out	0x14, r18	; 20
    14e2:	08 95       	ret
    14e4:	44 23       	and	r20, r20
    14e6:	19 f0       	breq	.+6      	; 0x14ee <direction+0x8c>
    14e8:	41 30       	cpi	r20, 0x01	; 1
    14ea:	b9 f4       	brne	.+46     	; 0x151a <direction+0xb8>
    14ec:	0c c0       	rjmp	.+24     	; 0x1506 <direction+0xa4>
    14ee:	21 b3       	in	r18, 0x11	; 17
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <direction+0x98>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	6a 95       	dec	r22
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <direction+0x94>
    14fe:	80 95       	com	r24
    1500:	82 23       	and	r24, r18
    1502:	81 bb       	out	0x11, r24	; 17
    1504:	08 95       	ret
    1506:	21 b3       	in	r18, 0x11	; 17
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <direction+0xb0>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	6a 95       	dec	r22
    1514:	e2 f7       	brpl	.-8      	; 0x150e <direction+0xac>
    1516:	28 2b       	or	r18, r24
    1518:	21 bb       	out	0x11, r18	; 17
    151a:	08 95       	ret

0000151c <serial_select>:
    151c:	88 23       	and	r24, r24
    151e:	21 f4       	brne	.+8      	; 0x1528 <serial_select+0xc>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	67 e0       	ldi	r22, 0x07	; 7
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <serial_select+0x14>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	41 f4       	brne	.+16     	; 0x153c <serial_select+0x20>
    152c:	67 e0       	ldi	r22, 0x07	; 7
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	0a c0       	rjmp	.+20     	; 0x1550 <serial_select+0x34>
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	59 f4       	brne	.+22     	; 0x1556 <serial_select+0x3a>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	67 e0       	ldi	r22, 0x07	; 7
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	62 e0       	ldi	r22, 0x02	; 2
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
    1554:	08 95       	ret
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	51 f4       	brne	.+20     	; 0x156e <serial_select+0x52>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	67 e0       	ldi	r22, 0x07	; 7
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <write>
    156e:	08 95       	ret

00001570 <jsonparser>:
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	ea 01       	movw	r28, r20
    157e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <strstr>
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	19 f4       	brne	.+6      	; 0x158c <jsonparser+0x1c>
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	1d c0       	rjmp	.+58     	; 0x15c6 <jsonparser+0x56>
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	62 ec       	ldi	r22, 0xC2	; 194
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <strstr>
    1596:	7c 01       	movw	r14, r24
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	e8 0e       	add	r14, r24
    159e:	f9 1e       	adc	r15, r25
    15a0:	c7 01       	movw	r24, r14
    15a2:	62 e2       	ldi	r22, 0x22	; 34
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <strchr>
    15aa:	8c 01       	movw	r16, r24
    15ac:	0e 19       	sub	r16, r14
    15ae:	1f 09       	sbc	r17, r15
    15b0:	ce 01       	movw	r24, r28
    15b2:	b7 01       	movw	r22, r14
    15b4:	a8 01       	movw	r20, r16
    15b6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <strncpy>
    15ba:	0c 0f       	add	r16, r28
    15bc:	1d 1f       	adc	r17, r29
    15be:	f8 01       	movw	r30, r16
    15c0:	10 82       	st	Z, r1
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	c9 01       	movw	r24, r18
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	08 95       	ret

000015d6 <compare>:
    15d6:	db 01       	movw	r26, r22
    15d8:	0d 90       	ld	r0, X+
    15da:	00 20       	and	r0, r0
    15dc:	e9 f7       	brne	.-6      	; 0x15d8 <compare+0x2>
    15de:	11 97       	sbiw	r26, 0x01	; 1
    15e0:	a6 1b       	sub	r26, r22
    15e2:	b7 0b       	sbc	r27, r23
    15e4:	4a 2f       	mov	r20, r26
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <strncasecmp>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	89 2b       	or	r24, r25
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <compare+0x22>
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	c9 01       	movw	r24, r18
    15fa:	08 95       	ret

000015fc <str_num>:
    15fc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <atoi>
    1600:	08 95       	ret

00001602 <wifi_off>:
    1602:	d2 9a       	sbi	0x1a, 2	; 26
    1604:	da 98       	cbi	0x1b, 2	; 27
    1606:	08 95       	ret

00001608 <wifi_status>:
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	08 95       	ret

0000160e <wifi_restart>:
    160e:	d2 9a       	sbi	0x1a, 2	; 26
    1610:	da 98       	cbi	0x1b, 2	; 27
    1612:	88 e8       	ldi	r24, 0x88	; 136
    1614:	93 e1       	ldi	r25, 0x13	; 19
    1616:	20 e9       	ldi	r18, 0x90	; 144
    1618:	31 e0       	ldi	r19, 0x01	; 1
    161a:	f9 01       	movw	r30, r18
    161c:	31 97       	sbiw	r30, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <wifi_restart+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1620:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1622:	d9 f7       	brne	.-10     	; 0x161a <wifi_restart+0xc>
    1624:	da 9a       	sbi	0x1b, 2	; 27
    1626:	80 e4       	ldi	r24, 0x40	; 64
    1628:	9c e9       	ldi	r25, 0x9C	; 156
    162a:	20 e9       	ldi	r18, 0x90	; 144
    162c:	31 e0       	ldi	r19, 0x01	; 1
    162e:	f9 01       	movw	r30, r18
    1630:	31 97       	sbiw	r30, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <wifi_restart+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1636:	d9 f7       	brne	.-10     	; 0x162e <wifi_restart+0x20>
    1638:	08 95       	ret

0000163a <WaitForWResponse>:
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	6c 01       	movw	r12, r24
    164e:	ff 24       	eor	r15, r15
    1650:	c0 e0       	ldi	r28, 0x00	; 0
    1652:	d0 e0       	ldi	r29, 0x00	; 0
    1654:	80 ea       	ldi	r24, 0xA0	; 160
    1656:	a8 2e       	mov	r10, r24
    1658:	8f e0       	ldi	r24, 0x0F	; 15
    165a:	b8 2e       	mov	r11, r24
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <WaitForWResponse+0x2c>
    165e:	21 96       	adiw	r28, 0x01	; 1
    1660:	c5 01       	movw	r24, r10
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <WaitForWResponse+0x28>
    1666:	0e 94 16 01 	call	0x22c	; 0x22c <serial_available>
    166a:	89 2b       	or	r24, r25
    166c:	19 f4       	brne	.+6      	; 0x1674 <WaitForWResponse+0x3a>
    166e:	cc 15       	cp	r28, r12
    1670:	dd 05       	cpc	r29, r13
    1672:	a8 f3       	brcs	.-22     	; 0x165e <WaitForWResponse+0x24>
    1674:	cc 15       	cp	r28, r12
    1676:	dd 05       	cpc	r29, r13
    1678:	c9 f0       	breq	.+50     	; 0x16ac <WaitForWResponse+0x72>
    167a:	0f 2d       	mov	r16, r15
    167c:	10 e0       	ldi	r17, 0x00	; 0
    167e:	0e 94 bd 00 	call	0x17a	; 0x17a <serial_read>
    1682:	f8 01       	movw	r30, r16
    1684:	e5 5c       	subi	r30, 0xC5	; 197
    1686:	fc 4f       	sbci	r31, 0xFC	; 252
    1688:	80 83       	st	Z, r24
    168a:	8a 30       	cpi	r24, 0x0A	; 10
    168c:	69 f4       	brne	.+26     	; 0x16a8 <WaitForWResponse+0x6e>
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	8f 15       	cp	r24, r15
    1692:	50 f4       	brcc	.+20     	; 0x16a8 <WaitForWResponse+0x6e>
    1694:	0e 94 38 01 	call	0x270	; 0x270 <s_clearbuffer>
    1698:	98 01       	movw	r18, r16
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	30 40       	sbci	r19, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	e5 5c       	subi	r30, 0xC5	; 197
    16a2:	fc 4f       	sbci	r31, 0xFC	; 252
    16a4:	10 82       	st	Z, r1
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <WaitForWResponse+0x76>
    16a8:	f3 94       	inc	r15
    16aa:	dd cf       	rjmp	.-70     	; 0x1666 <WaitForWResponse+0x2c>
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	c9 01       	movw	r24, r18
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	df 90       	pop	r13
    16be:	cf 90       	pop	r12
    16c0:	bf 90       	pop	r11
    16c2:	af 90       	pop	r10
    16c4:	08 95       	ret

000016c6 <wifi_http>:
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	8c 01       	movw	r16, r24
    16d0:	7b 01       	movw	r14, r22
    16d2:	0e 94 38 01 	call	0x270	; 0x270 <s_clearbuffer>
    16d6:	85 ec       	ldi	r24, 0xC5	; 197
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
    16de:	87 e5       	ldi	r24, 0x57	; 87
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <serial_string_P>
    16e6:	82 e3       	ldi	r24, 0x32	; 50
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 1d 0b 	call	0x163a	; 0x163a <WaitForWResponse>
    16ee:	0e 94 38 01 	call	0x270	; 0x270 <s_clearbuffer>
    16f2:	10 92 3b 03 	sts	0x033B, r1
    16f6:	c8 01       	movw	r24, r16
    16f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
    16fc:	84 e5       	ldi	r24, 0x54	; 84
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <serial_string_P>
    1704:	88 ee       	ldi	r24, 0xE8	; 232
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 1d 0b 	call	0x163a	; 0x163a <WaitForWResponse>
    170c:	c7 01       	movw	r24, r14
    170e:	6b e3       	ldi	r22, 0x3B	; 59
    1710:	73 e0       	ldi	r23, 0x03	; 3
    1712:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <strcpy>
    1716:	0e 94 38 01 	call	0x270	; 0x270 <s_clearbuffer>
    171a:	80 91 d8 01 	lds	r24, 0x01D8
    171e:	90 91 d9 01 	lds	r25, 0x01D9
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	90 93 d9 01 	sts	0x01D9, r25
    1728:	80 93 d8 01 	sts	0x01D8, r24
    172c:	62 e3       	ldi	r22, 0x32	; 50
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__divmodhi4>
    1734:	89 2b       	or	r24, r25
    1736:	21 f4       	brne	.+8      	; 0x1740 <wifi_http+0x7a>
    1738:	8a ec       	ldi	r24, 0xCA	; 202
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	08 95       	ret

0000174e <wifi_connect>:
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	8c 01       	movw	r16, r24
    1758:	7b 01       	movw	r14, r22
    175a:	83 e2       	ldi	r24, 0x23	; 35
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	b8 01       	movw	r22, r16
    1760:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <strcpy>
    1764:	8f e2       	ldi	r24, 0x2F	; 47
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	b7 01       	movw	r22, r14
    176a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <strcpy>
    176e:	0e 94 38 01 	call	0x270	; 0x270 <s_clearbuffer>
    1772:	80 ed       	ldi	r24, 0xD0	; 208
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
    177a:	80 e6       	ldi	r24, 0x60	; 96
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <serial_string_P>
    1782:	82 e3       	ldi	r24, 0x32	; 50
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 1d 0b 	call	0x163a	; 0x163a <WaitForWResponse>
    178a:	c8 01       	movw	r24, r16
    178c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
    1790:	8d e5       	ldi	r24, 0x5D	; 93
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <serial_string_P>
    1798:	82 e3       	ldi	r24, 0x32	; 50
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 1d 0b 	call	0x163a	; 0x163a <WaitForWResponse>
    17a0:	c7 01       	movw	r24, r14
    17a2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <serial_string>
    17a6:	8a e5       	ldi	r24, 0x5A	; 90
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <serial_string_P>
    17ae:	82 e3       	ldi	r24, 0x32	; 50
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 1d 0b 	call	0x163a	; 0x163a <WaitForWResponse>
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	c9 01       	movw	r24, r18
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	08 95       	ret

000017c6 <wifi_init>:
    17c6:	0e 94 07 0b 	call	0x160e	; 0x160e <wifi_restart>
    17ca:	83 e6       	ldi	r24, 0x63	; 99
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <serial_string_P>
    17d2:	84 ef       	ldi	r24, 0xF4	; 244
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	20 e9       	ldi	r18, 0x90	; 144
    17d8:	31 e0       	ldi	r19, 0x01	; 1
    17da:	f9 01       	movw	r30, r18
    17dc:	31 97       	sbiw	r30, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <wifi_init+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	d9 f7       	brne	.-10     	; 0x17da <wifi_init+0x14>
    17e4:	88 ec       	ldi	r24, 0xC8	; 200
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 1d 0b 	call	0x163a	; 0x163a <WaitForWResponse>
    17ec:	0e 94 38 01 	call	0x270	; 0x270 <s_clearbuffer>
    17f0:	08 95       	ret

000017f2 <reconfigure>:
    17f2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <wifi_init>
    17f6:	08 95       	ret

000017f8 <__fixunssfsi>:
    17f8:	70 d0       	rcall	.+224    	; 0x18da <__fp_splitA>
    17fa:	88 f0       	brcs	.+34     	; 0x181e <__fixunssfsi+0x26>
    17fc:	9f 57       	subi	r25, 0x7F	; 127
    17fe:	90 f0       	brcs	.+36     	; 0x1824 <__fixunssfsi+0x2c>
    1800:	b9 2f       	mov	r27, r25
    1802:	99 27       	eor	r25, r25
    1804:	b7 51       	subi	r27, 0x17	; 23
    1806:	a0 f0       	brcs	.+40     	; 0x1830 <__fixunssfsi+0x38>
    1808:	d1 f0       	breq	.+52     	; 0x183e <__fixunssfsi+0x46>
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	88 1f       	adc	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	1a f0       	brmi	.+6      	; 0x181a <__fixunssfsi+0x22>
    1814:	ba 95       	dec	r27
    1816:	c9 f7       	brne	.-14     	; 0x180a <__fixunssfsi+0x12>
    1818:	12 c0       	rjmp	.+36     	; 0x183e <__fixunssfsi+0x46>
    181a:	b1 30       	cpi	r27, 0x01	; 1
    181c:	81 f0       	breq	.+32     	; 0x183e <__fixunssfsi+0x46>
    181e:	77 d0       	rcall	.+238    	; 0x190e <__fp_zero>
    1820:	b1 e0       	ldi	r27, 0x01	; 1
    1822:	08 95       	ret
    1824:	74 c0       	rjmp	.+232    	; 0x190e <__fp_zero>
    1826:	67 2f       	mov	r22, r23
    1828:	78 2f       	mov	r23, r24
    182a:	88 27       	eor	r24, r24
    182c:	b8 5f       	subi	r27, 0xF8	; 248
    182e:	39 f0       	breq	.+14     	; 0x183e <__fixunssfsi+0x46>
    1830:	b9 3f       	cpi	r27, 0xF9	; 249
    1832:	cc f3       	brlt	.-14     	; 0x1826 <__fixunssfsi+0x2e>
    1834:	86 95       	lsr	r24
    1836:	77 95       	ror	r23
    1838:	67 95       	ror	r22
    183a:	b3 95       	inc	r27
    183c:	d9 f7       	brne	.-10     	; 0x1834 <__fixunssfsi+0x3c>
    183e:	3e f4       	brtc	.+14     	; 0x184e <__fixunssfsi+0x56>
    1840:	90 95       	com	r25
    1842:	80 95       	com	r24
    1844:	70 95       	com	r23
    1846:	61 95       	neg	r22
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	8f 4f       	sbci	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	08 95       	ret

00001850 <__floatunsisf>:
    1850:	e8 94       	clt
    1852:	09 c0       	rjmp	.+18     	; 0x1866 <__floatsisf+0x12>

00001854 <__floatsisf>:
    1854:	97 fb       	bst	r25, 7
    1856:	3e f4       	brtc	.+14     	; 0x1866 <__floatsisf+0x12>
    1858:	90 95       	com	r25
    185a:	80 95       	com	r24
    185c:	70 95       	com	r23
    185e:	61 95       	neg	r22
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	8f 4f       	sbci	r24, 0xFF	; 255
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	99 23       	and	r25, r25
    1868:	a9 f0       	breq	.+42     	; 0x1894 <__floatsisf+0x40>
    186a:	f9 2f       	mov	r31, r25
    186c:	96 e9       	ldi	r25, 0x96	; 150
    186e:	bb 27       	eor	r27, r27
    1870:	93 95       	inc	r25
    1872:	f6 95       	lsr	r31
    1874:	87 95       	ror	r24
    1876:	77 95       	ror	r23
    1878:	67 95       	ror	r22
    187a:	b7 95       	ror	r27
    187c:	f1 11       	cpse	r31, r1
    187e:	f8 cf       	rjmp	.-16     	; 0x1870 <__floatsisf+0x1c>
    1880:	fa f4       	brpl	.+62     	; 0x18c0 <__floatsisf+0x6c>
    1882:	bb 0f       	add	r27, r27
    1884:	11 f4       	brne	.+4      	; 0x188a <__floatsisf+0x36>
    1886:	60 ff       	sbrs	r22, 0
    1888:	1b c0       	rjmp	.+54     	; 0x18c0 <__floatsisf+0x6c>
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	16 c0       	rjmp	.+44     	; 0x18c0 <__floatsisf+0x6c>
    1894:	88 23       	and	r24, r24
    1896:	11 f0       	breq	.+4      	; 0x189c <__floatsisf+0x48>
    1898:	96 e9       	ldi	r25, 0x96	; 150
    189a:	11 c0       	rjmp	.+34     	; 0x18be <__floatsisf+0x6a>
    189c:	77 23       	and	r23, r23
    189e:	21 f0       	breq	.+8      	; 0x18a8 <__floatsisf+0x54>
    18a0:	9e e8       	ldi	r25, 0x8E	; 142
    18a2:	87 2f       	mov	r24, r23
    18a4:	76 2f       	mov	r23, r22
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <__floatsisf+0x5e>
    18a8:	66 23       	and	r22, r22
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <__floatsisf+0x74>
    18ac:	96 e8       	ldi	r25, 0x86	; 134
    18ae:	86 2f       	mov	r24, r22
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	2a f0       	brmi	.+10     	; 0x18c0 <__floatsisf+0x6c>
    18b6:	9a 95       	dec	r25
    18b8:	66 0f       	add	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	da f7       	brpl	.-10     	; 0x18b6 <__floatsisf+0x62>
    18c0:	88 0f       	add	r24, r24
    18c2:	96 95       	lsr	r25
    18c4:	87 95       	ror	r24
    18c6:	97 f9       	bld	r25, 7
    18c8:	08 95       	ret

000018ca <__fp_split3>:
    18ca:	57 fd       	sbrc	r21, 7
    18cc:	90 58       	subi	r25, 0x80	; 128
    18ce:	44 0f       	add	r20, r20
    18d0:	55 1f       	adc	r21, r21
    18d2:	59 f0       	breq	.+22     	; 0x18ea <__fp_splitA+0x10>
    18d4:	5f 3f       	cpi	r21, 0xFF	; 255
    18d6:	71 f0       	breq	.+28     	; 0x18f4 <__fp_splitA+0x1a>
    18d8:	47 95       	ror	r20

000018da <__fp_splitA>:
    18da:	88 0f       	add	r24, r24
    18dc:	97 fb       	bst	r25, 7
    18de:	99 1f       	adc	r25, r25
    18e0:	61 f0       	breq	.+24     	; 0x18fa <__fp_splitA+0x20>
    18e2:	9f 3f       	cpi	r25, 0xFF	; 255
    18e4:	79 f0       	breq	.+30     	; 0x1904 <__fp_splitA+0x2a>
    18e6:	87 95       	ror	r24
    18e8:	08 95       	ret
    18ea:	12 16       	cp	r1, r18
    18ec:	13 06       	cpc	r1, r19
    18ee:	14 06       	cpc	r1, r20
    18f0:	55 1f       	adc	r21, r21
    18f2:	f2 cf       	rjmp	.-28     	; 0x18d8 <__fp_split3+0xe>
    18f4:	46 95       	lsr	r20
    18f6:	f1 df       	rcall	.-30     	; 0x18da <__fp_splitA>
    18f8:	08 c0       	rjmp	.+16     	; 0x190a <__fp_splitA+0x30>
    18fa:	16 16       	cp	r1, r22
    18fc:	17 06       	cpc	r1, r23
    18fe:	18 06       	cpc	r1, r24
    1900:	99 1f       	adc	r25, r25
    1902:	f1 cf       	rjmp	.-30     	; 0x18e6 <__fp_splitA+0xc>
    1904:	86 95       	lsr	r24
    1906:	71 05       	cpc	r23, r1
    1908:	61 05       	cpc	r22, r1
    190a:	08 94       	sec
    190c:	08 95       	ret

0000190e <__fp_zero>:
    190e:	e8 94       	clt

00001910 <__fp_szero>:
    1910:	bb 27       	eor	r27, r27
    1912:	66 27       	eor	r22, r22
    1914:	77 27       	eor	r23, r23
    1916:	cb 01       	movw	r24, r22
    1918:	97 f9       	bld	r25, 7
    191a:	08 95       	ret

0000191c <__mulsf3>:
    191c:	0b d0       	rcall	.+22     	; 0x1934 <__mulsf3x>
    191e:	78 c0       	rjmp	.+240    	; 0x1a10 <__fp_round>
    1920:	69 d0       	rcall	.+210    	; 0x19f4 <__fp_pscA>
    1922:	28 f0       	brcs	.+10     	; 0x192e <__mulsf3+0x12>
    1924:	6e d0       	rcall	.+220    	; 0x1a02 <__fp_pscB>
    1926:	18 f0       	brcs	.+6      	; 0x192e <__mulsf3+0x12>
    1928:	95 23       	and	r25, r21
    192a:	09 f0       	breq	.+2      	; 0x192e <__mulsf3+0x12>
    192c:	5a c0       	rjmp	.+180    	; 0x19e2 <__fp_inf>
    192e:	5f c0       	rjmp	.+190    	; 0x19ee <__fp_nan>
    1930:	11 24       	eor	r1, r1
    1932:	ee cf       	rjmp	.-36     	; 0x1910 <__fp_szero>

00001934 <__mulsf3x>:
    1934:	ca df       	rcall	.-108    	; 0x18ca <__fp_split3>
    1936:	a0 f3       	brcs	.-24     	; 0x1920 <__mulsf3+0x4>

00001938 <__mulsf3_pse>:
    1938:	95 9f       	mul	r25, r21
    193a:	d1 f3       	breq	.-12     	; 0x1930 <__mulsf3+0x14>
    193c:	95 0f       	add	r25, r21
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	55 1f       	adc	r21, r21
    1942:	62 9f       	mul	r22, r18
    1944:	f0 01       	movw	r30, r0
    1946:	72 9f       	mul	r23, r18
    1948:	bb 27       	eor	r27, r27
    194a:	f0 0d       	add	r31, r0
    194c:	b1 1d       	adc	r27, r1
    194e:	63 9f       	mul	r22, r19
    1950:	aa 27       	eor	r26, r26
    1952:	f0 0d       	add	r31, r0
    1954:	b1 1d       	adc	r27, r1
    1956:	aa 1f       	adc	r26, r26
    1958:	64 9f       	mul	r22, r20
    195a:	66 27       	eor	r22, r22
    195c:	b0 0d       	add	r27, r0
    195e:	a1 1d       	adc	r26, r1
    1960:	66 1f       	adc	r22, r22
    1962:	82 9f       	mul	r24, r18
    1964:	22 27       	eor	r18, r18
    1966:	b0 0d       	add	r27, r0
    1968:	a1 1d       	adc	r26, r1
    196a:	62 1f       	adc	r22, r18
    196c:	73 9f       	mul	r23, r19
    196e:	b0 0d       	add	r27, r0
    1970:	a1 1d       	adc	r26, r1
    1972:	62 1f       	adc	r22, r18
    1974:	83 9f       	mul	r24, r19
    1976:	a0 0d       	add	r26, r0
    1978:	61 1d       	adc	r22, r1
    197a:	22 1f       	adc	r18, r18
    197c:	74 9f       	mul	r23, r20
    197e:	33 27       	eor	r19, r19
    1980:	a0 0d       	add	r26, r0
    1982:	61 1d       	adc	r22, r1
    1984:	23 1f       	adc	r18, r19
    1986:	84 9f       	mul	r24, r20
    1988:	60 0d       	add	r22, r0
    198a:	21 1d       	adc	r18, r1
    198c:	82 2f       	mov	r24, r18
    198e:	76 2f       	mov	r23, r22
    1990:	6a 2f       	mov	r22, r26
    1992:	11 24       	eor	r1, r1
    1994:	9f 57       	subi	r25, 0x7F	; 127
    1996:	50 40       	sbci	r21, 0x00	; 0
    1998:	8a f0       	brmi	.+34     	; 0x19bc <__mulsf3_pse+0x84>
    199a:	e1 f0       	breq	.+56     	; 0x19d4 <__mulsf3_pse+0x9c>
    199c:	88 23       	and	r24, r24
    199e:	4a f0       	brmi	.+18     	; 0x19b2 <__mulsf3_pse+0x7a>
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	bb 1f       	adc	r27, r27
    19a6:	66 1f       	adc	r22, r22
    19a8:	77 1f       	adc	r23, r23
    19aa:	88 1f       	adc	r24, r24
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	50 40       	sbci	r21, 0x00	; 0
    19b0:	a9 f7       	brne	.-22     	; 0x199c <__mulsf3_pse+0x64>
    19b2:	9e 3f       	cpi	r25, 0xFE	; 254
    19b4:	51 05       	cpc	r21, r1
    19b6:	70 f0       	brcs	.+28     	; 0x19d4 <__mulsf3_pse+0x9c>
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <__fp_inf>
    19ba:	aa cf       	rjmp	.-172    	; 0x1910 <__fp_szero>
    19bc:	5f 3f       	cpi	r21, 0xFF	; 255
    19be:	ec f3       	brlt	.-6      	; 0x19ba <__mulsf3_pse+0x82>
    19c0:	98 3e       	cpi	r25, 0xE8	; 232
    19c2:	dc f3       	brlt	.-10     	; 0x19ba <__mulsf3_pse+0x82>
    19c4:	86 95       	lsr	r24
    19c6:	77 95       	ror	r23
    19c8:	67 95       	ror	r22
    19ca:	b7 95       	ror	r27
    19cc:	f7 95       	ror	r31
    19ce:	e7 95       	ror	r30
    19d0:	9f 5f       	subi	r25, 0xFF	; 255
    19d2:	c1 f7       	brne	.-16     	; 0x19c4 <__mulsf3_pse+0x8c>
    19d4:	fe 2b       	or	r31, r30
    19d6:	88 0f       	add	r24, r24
    19d8:	91 1d       	adc	r25, r1
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	97 f9       	bld	r25, 7
    19e0:	08 95       	ret

000019e2 <__fp_inf>:
    19e2:	97 f9       	bld	r25, 7
    19e4:	9f 67       	ori	r25, 0x7F	; 127
    19e6:	80 e8       	ldi	r24, 0x80	; 128
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	08 95       	ret

000019ee <__fp_nan>:
    19ee:	9f ef       	ldi	r25, 0xFF	; 255
    19f0:	80 ec       	ldi	r24, 0xC0	; 192
    19f2:	08 95       	ret

000019f4 <__fp_pscA>:
    19f4:	00 24       	eor	r0, r0
    19f6:	0a 94       	dec	r0
    19f8:	16 16       	cp	r1, r22
    19fa:	17 06       	cpc	r1, r23
    19fc:	18 06       	cpc	r1, r24
    19fe:	09 06       	cpc	r0, r25
    1a00:	08 95       	ret

00001a02 <__fp_pscB>:
    1a02:	00 24       	eor	r0, r0
    1a04:	0a 94       	dec	r0
    1a06:	12 16       	cp	r1, r18
    1a08:	13 06       	cpc	r1, r19
    1a0a:	14 06       	cpc	r1, r20
    1a0c:	05 06       	cpc	r0, r21
    1a0e:	08 95       	ret

00001a10 <__fp_round>:
    1a10:	09 2e       	mov	r0, r25
    1a12:	03 94       	inc	r0
    1a14:	00 0c       	add	r0, r0
    1a16:	11 f4       	brne	.+4      	; 0x1a1c <__fp_round+0xc>
    1a18:	88 23       	and	r24, r24
    1a1a:	52 f0       	brmi	.+20     	; 0x1a30 <__fp_round+0x20>
    1a1c:	bb 0f       	add	r27, r27
    1a1e:	40 f4       	brcc	.+16     	; 0x1a30 <__fp_round+0x20>
    1a20:	bf 2b       	or	r27, r31
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <__fp_round+0x18>
    1a24:	60 ff       	sbrs	r22, 0
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <__fp_round+0x20>
    1a28:	6f 5f       	subi	r22, 0xFF	; 255
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	08 95       	ret

00001a32 <__mulsi3>:
    1a32:	62 9f       	mul	r22, r18
    1a34:	d0 01       	movw	r26, r0
    1a36:	73 9f       	mul	r23, r19
    1a38:	f0 01       	movw	r30, r0
    1a3a:	82 9f       	mul	r24, r18
    1a3c:	e0 0d       	add	r30, r0
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	64 9f       	mul	r22, r20
    1a42:	e0 0d       	add	r30, r0
    1a44:	f1 1d       	adc	r31, r1
    1a46:	92 9f       	mul	r25, r18
    1a48:	f0 0d       	add	r31, r0
    1a4a:	83 9f       	mul	r24, r19
    1a4c:	f0 0d       	add	r31, r0
    1a4e:	74 9f       	mul	r23, r20
    1a50:	f0 0d       	add	r31, r0
    1a52:	65 9f       	mul	r22, r21
    1a54:	f0 0d       	add	r31, r0
    1a56:	99 27       	eor	r25, r25
    1a58:	72 9f       	mul	r23, r18
    1a5a:	b0 0d       	add	r27, r0
    1a5c:	e1 1d       	adc	r30, r1
    1a5e:	f9 1f       	adc	r31, r25
    1a60:	63 9f       	mul	r22, r19
    1a62:	b0 0d       	add	r27, r0
    1a64:	e1 1d       	adc	r30, r1
    1a66:	f9 1f       	adc	r31, r25
    1a68:	bd 01       	movw	r22, r26
    1a6a:	cf 01       	movw	r24, r30
    1a6c:	11 24       	eor	r1, r1
    1a6e:	08 95       	ret

00001a70 <__divmodhi4>:
    1a70:	97 fb       	bst	r25, 7
    1a72:	09 2e       	mov	r0, r25
    1a74:	07 26       	eor	r0, r23
    1a76:	0a d0       	rcall	.+20     	; 0x1a8c <__divmodhi4_neg1>
    1a78:	77 fd       	sbrc	r23, 7
    1a7a:	04 d0       	rcall	.+8      	; 0x1a84 <__divmodhi4_neg2>
    1a7c:	49 d0       	rcall	.+146    	; 0x1b10 <__udivmodhi4>
    1a7e:	06 d0       	rcall	.+12     	; 0x1a8c <__divmodhi4_neg1>
    1a80:	00 20       	and	r0, r0
    1a82:	1a f4       	brpl	.+6      	; 0x1a8a <__divmodhi4_exit>

00001a84 <__divmodhi4_neg2>:
    1a84:	70 95       	com	r23
    1a86:	61 95       	neg	r22
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255

00001a8a <__divmodhi4_exit>:
    1a8a:	08 95       	ret

00001a8c <__divmodhi4_neg1>:
    1a8c:	f6 f7       	brtc	.-4      	; 0x1a8a <__divmodhi4_exit>
    1a8e:	90 95       	com	r25
    1a90:	81 95       	neg	r24
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	08 95       	ret

00001a96 <__udivmodsi4>:
    1a96:	a1 e2       	ldi	r26, 0x21	; 33
    1a98:	1a 2e       	mov	r1, r26
    1a9a:	aa 1b       	sub	r26, r26
    1a9c:	bb 1b       	sub	r27, r27
    1a9e:	fd 01       	movw	r30, r26
    1aa0:	0d c0       	rjmp	.+26     	; 0x1abc <__udivmodsi4_ep>

00001aa2 <__udivmodsi4_loop>:
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	ee 1f       	adc	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	a2 17       	cp	r26, r18
    1aac:	b3 07       	cpc	r27, r19
    1aae:	e4 07       	cpc	r30, r20
    1ab0:	f5 07       	cpc	r31, r21
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <__udivmodsi4_ep>
    1ab4:	a2 1b       	sub	r26, r18
    1ab6:	b3 0b       	sbc	r27, r19
    1ab8:	e4 0b       	sbc	r30, r20
    1aba:	f5 0b       	sbc	r31, r21

00001abc <__udivmodsi4_ep>:
    1abc:	66 1f       	adc	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	1a 94       	dec	r1
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <__udivmodsi4_loop>
    1ac8:	60 95       	com	r22
    1aca:	70 95       	com	r23
    1acc:	80 95       	com	r24
    1ace:	90 95       	com	r25
    1ad0:	9b 01       	movw	r18, r22
    1ad2:	ac 01       	movw	r20, r24
    1ad4:	bd 01       	movw	r22, r26
    1ad6:	cf 01       	movw	r24, r30
    1ad8:	08 95       	ret

00001ada <__divmodsi4>:
    1ada:	97 fb       	bst	r25, 7
    1adc:	09 2e       	mov	r0, r25
    1ade:	05 26       	eor	r0, r21
    1ae0:	0e d0       	rcall	.+28     	; 0x1afe <__divmodsi4_neg1>
    1ae2:	57 fd       	sbrc	r21, 7
    1ae4:	04 d0       	rcall	.+8      	; 0x1aee <__divmodsi4_neg2>
    1ae6:	d7 df       	rcall	.-82     	; 0x1a96 <__udivmodsi4>
    1ae8:	0a d0       	rcall	.+20     	; 0x1afe <__divmodsi4_neg1>
    1aea:	00 1c       	adc	r0, r0
    1aec:	38 f4       	brcc	.+14     	; 0x1afc <__divmodsi4_exit>

00001aee <__divmodsi4_neg2>:
    1aee:	50 95       	com	r21
    1af0:	40 95       	com	r20
    1af2:	30 95       	com	r19
    1af4:	21 95       	neg	r18
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	4f 4f       	sbci	r20, 0xFF	; 255
    1afa:	5f 4f       	sbci	r21, 0xFF	; 255

00001afc <__divmodsi4_exit>:
    1afc:	08 95       	ret

00001afe <__divmodsi4_neg1>:
    1afe:	f6 f7       	brtc	.-4      	; 0x1afc <__divmodsi4_exit>
    1b00:	90 95       	com	r25
    1b02:	80 95       	com	r24
    1b04:	70 95       	com	r23
    1b06:	61 95       	neg	r22
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	08 95       	ret

00001b10 <__udivmodhi4>:
    1b10:	aa 1b       	sub	r26, r26
    1b12:	bb 1b       	sub	r27, r27
    1b14:	51 e1       	ldi	r21, 0x11	; 17
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <__udivmodhi4_ep>

00001b18 <__udivmodhi4_loop>:
    1b18:	aa 1f       	adc	r26, r26
    1b1a:	bb 1f       	adc	r27, r27
    1b1c:	a6 17       	cp	r26, r22
    1b1e:	b7 07       	cpc	r27, r23
    1b20:	10 f0       	brcs	.+4      	; 0x1b26 <__udivmodhi4_ep>
    1b22:	a6 1b       	sub	r26, r22
    1b24:	b7 0b       	sbc	r27, r23

00001b26 <__udivmodhi4_ep>:
    1b26:	88 1f       	adc	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	5a 95       	dec	r21
    1b2c:	a9 f7       	brne	.-22     	; 0x1b18 <__udivmodhi4_loop>
    1b2e:	80 95       	com	r24
    1b30:	90 95       	com	r25
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	08 95       	ret

00001b38 <atoi>:
    1b38:	fc 01       	movw	r30, r24
    1b3a:	88 27       	eor	r24, r24
    1b3c:	99 27       	eor	r25, r25
    1b3e:	e8 94       	clt
    1b40:	21 91       	ld	r18, Z+
    1b42:	20 32       	cpi	r18, 0x20	; 32
    1b44:	e9 f3       	breq	.-6      	; 0x1b40 <atoi+0x8>
    1b46:	29 30       	cpi	r18, 0x09	; 9
    1b48:	10 f0       	brcs	.+4      	; 0x1b4e <atoi+0x16>
    1b4a:	2e 30       	cpi	r18, 0x0E	; 14
    1b4c:	c8 f3       	brcs	.-14     	; 0x1b40 <atoi+0x8>
    1b4e:	2b 32       	cpi	r18, 0x2B	; 43
    1b50:	41 f0       	breq	.+16     	; 0x1b62 <atoi+0x2a>
    1b52:	2d 32       	cpi	r18, 0x2D	; 45
    1b54:	39 f4       	brne	.+14     	; 0x1b64 <atoi+0x2c>
    1b56:	68 94       	set
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <atoi+0x2a>
    1b5a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__mulhi_const_10>
    1b5e:	82 0f       	add	r24, r18
    1b60:	91 1d       	adc	r25, r1
    1b62:	21 91       	ld	r18, Z+
    1b64:	20 53       	subi	r18, 0x30	; 48
    1b66:	2a 30       	cpi	r18, 0x0A	; 10
    1b68:	c0 f3       	brcs	.-16     	; 0x1b5a <atoi+0x22>
    1b6a:	1e f4       	brtc	.+6      	; 0x1b72 <atoi+0x3a>
    1b6c:	90 95       	com	r25
    1b6e:	81 95       	neg	r24
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	08 95       	ret

00001b74 <strchr>:
    1b74:	fc 01       	movw	r30, r24
    1b76:	81 91       	ld	r24, Z+
    1b78:	86 17       	cp	r24, r22
    1b7a:	21 f0       	breq	.+8      	; 0x1b84 <strchr+0x10>
    1b7c:	88 23       	and	r24, r24
    1b7e:	d9 f7       	brne	.-10     	; 0x1b76 <strchr+0x2>
    1b80:	99 27       	eor	r25, r25
    1b82:	08 95       	ret
    1b84:	31 97       	sbiw	r30, 0x01	; 1
    1b86:	cf 01       	movw	r24, r30
    1b88:	08 95       	ret

00001b8a <strcpy>:
    1b8a:	fb 01       	movw	r30, r22
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	01 90       	ld	r0, Z+
    1b90:	0d 92       	st	X+, r0
    1b92:	00 20       	and	r0, r0
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <strcpy+0x4>
    1b96:	08 95       	ret

00001b98 <strncasecmp>:
    1b98:	fb 01       	movw	r30, r22
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	41 50       	subi	r20, 0x01	; 1
    1b9e:	50 40       	sbci	r21, 0x00	; 0
    1ba0:	88 f0       	brcs	.+34     	; 0x1bc4 <strncasecmp+0x2c>
    1ba2:	8d 91       	ld	r24, X+
    1ba4:	81 34       	cpi	r24, 0x41	; 65
    1ba6:	1c f0       	brlt	.+6      	; 0x1bae <strncasecmp+0x16>
    1ba8:	8b 35       	cpi	r24, 0x5B	; 91
    1baa:	0c f4       	brge	.+2      	; 0x1bae <strncasecmp+0x16>
    1bac:	80 5e       	subi	r24, 0xE0	; 224
    1bae:	61 91       	ld	r22, Z+
    1bb0:	61 34       	cpi	r22, 0x41	; 65
    1bb2:	1c f0       	brlt	.+6      	; 0x1bba <strncasecmp+0x22>
    1bb4:	6b 35       	cpi	r22, 0x5B	; 91
    1bb6:	0c f4       	brge	.+2      	; 0x1bba <strncasecmp+0x22>
    1bb8:	60 5e       	subi	r22, 0xE0	; 224
    1bba:	86 1b       	sub	r24, r22
    1bbc:	61 11       	cpse	r22, r1
    1bbe:	71 f3       	breq	.-36     	; 0x1b9c <strncasecmp+0x4>
    1bc0:	99 0b       	sbc	r25, r25
    1bc2:	08 95       	ret
    1bc4:	88 1b       	sub	r24, r24
    1bc6:	fc cf       	rjmp	.-8      	; 0x1bc0 <strncasecmp+0x28>

00001bc8 <strncpy>:
    1bc8:	fb 01       	movw	r30, r22
    1bca:	dc 01       	movw	r26, r24
    1bcc:	41 50       	subi	r20, 0x01	; 1
    1bce:	50 40       	sbci	r21, 0x00	; 0
    1bd0:	48 f0       	brcs	.+18     	; 0x1be4 <strncpy+0x1c>
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	0d 92       	st	X+, r0
    1bd6:	00 20       	and	r0, r0
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <strncpy+0x4>
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <strncpy+0x16>
    1bdc:	1d 92       	st	X+, r1
    1bde:	41 50       	subi	r20, 0x01	; 1
    1be0:	50 40       	sbci	r21, 0x00	; 0
    1be2:	e0 f7       	brcc	.-8      	; 0x1bdc <strncpy+0x14>
    1be4:	08 95       	ret

00001be6 <strstr>:
    1be6:	fb 01       	movw	r30, r22
    1be8:	51 91       	ld	r21, Z+
    1bea:	55 23       	and	r21, r21
    1bec:	a9 f0       	breq	.+42     	; 0x1c18 <strstr+0x32>
    1bee:	bf 01       	movw	r22, r30
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	4d 91       	ld	r20, X+
    1bf4:	45 17       	cp	r20, r21
    1bf6:	41 11       	cpse	r20, r1
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <strstr+0xc>
    1bfa:	59 f4       	brne	.+22     	; 0x1c12 <strstr+0x2c>
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	01 90       	ld	r0, Z+
    1c00:	00 20       	and	r0, r0
    1c02:	49 f0       	breq	.+18     	; 0x1c16 <strstr+0x30>
    1c04:	4d 91       	ld	r20, X+
    1c06:	40 15       	cp	r20, r0
    1c08:	41 11       	cpse	r20, r1
    1c0a:	c9 f3       	breq	.-14     	; 0x1bfe <strstr+0x18>
    1c0c:	fb 01       	movw	r30, r22
    1c0e:	41 11       	cpse	r20, r1
    1c10:	ef cf       	rjmp	.-34     	; 0x1bf0 <strstr+0xa>
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	08 95       	ret

00001c1a <itoa>:
    1c1a:	fb 01       	movw	r30, r22
    1c1c:	9f 01       	movw	r18, r30
    1c1e:	e8 94       	clt
    1c20:	42 30       	cpi	r20, 0x02	; 2
    1c22:	c4 f0       	brlt	.+48     	; 0x1c54 <itoa+0x3a>
    1c24:	45 32       	cpi	r20, 0x25	; 37
    1c26:	b4 f4       	brge	.+44     	; 0x1c54 <itoa+0x3a>
    1c28:	4a 30       	cpi	r20, 0x0A	; 10
    1c2a:	29 f4       	brne	.+10     	; 0x1c36 <itoa+0x1c>
    1c2c:	97 fb       	bst	r25, 7
    1c2e:	1e f4       	brtc	.+6      	; 0x1c36 <itoa+0x1c>
    1c30:	90 95       	com	r25
    1c32:	81 95       	neg	r24
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	64 2f       	mov	r22, r20
    1c38:	77 27       	eor	r23, r23
    1c3a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__udivmodhi4>
    1c3e:	80 5d       	subi	r24, 0xD0	; 208
    1c40:	8a 33       	cpi	r24, 0x3A	; 58
    1c42:	0c f0       	brlt	.+2      	; 0x1c46 <itoa+0x2c>
    1c44:	89 5d       	subi	r24, 0xD9	; 217
    1c46:	81 93       	st	Z+, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	a1 f7       	brne	.-24     	; 0x1c36 <itoa+0x1c>
    1c4e:	16 f4       	brtc	.+4      	; 0x1c54 <itoa+0x3a>
    1c50:	5d e2       	ldi	r21, 0x2D	; 45
    1c52:	51 93       	st	Z+, r21
    1c54:	10 82       	st	Z, r1
    1c56:	c9 01       	movw	r24, r18
    1c58:	0c 94 81 10 	jmp	0x2102	; 0x2102 <strrev>

00001c5c <ltoa>:
    1c5c:	fa 01       	movw	r30, r20
    1c5e:	cf 93       	push	r28
    1c60:	ff 93       	push	r31
    1c62:	ef 93       	push	r30
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	44 f1       	brlt	.+80     	; 0x1cb8 <ltoa+0x5c>
    1c68:	25 32       	cpi	r18, 0x25	; 37
    1c6a:	34 f5       	brge	.+76     	; 0x1cb8 <ltoa+0x5c>
    1c6c:	c2 2f       	mov	r28, r18
    1c6e:	e8 94       	clt
    1c70:	ca 30       	cpi	r28, 0x0A	; 10
    1c72:	49 f4       	brne	.+18     	; 0x1c86 <ltoa+0x2a>
    1c74:	97 fb       	bst	r25, 7
    1c76:	3e f4       	brtc	.+14     	; 0x1c86 <ltoa+0x2a>
    1c78:	90 95       	com	r25
    1c7a:	80 95       	com	r24
    1c7c:	70 95       	com	r23
    1c7e:	61 95       	neg	r22
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	2c 2f       	mov	r18, r28
    1c88:	33 27       	eor	r19, r19
    1c8a:	44 27       	eor	r20, r20
    1c8c:	55 27       	eor	r21, r21
    1c8e:	ff 93       	push	r31
    1c90:	ef 93       	push	r30
    1c92:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__udivmodsi4>
    1c96:	ef 91       	pop	r30
    1c98:	ff 91       	pop	r31
    1c9a:	60 5d       	subi	r22, 0xD0	; 208
    1c9c:	6a 33       	cpi	r22, 0x3A	; 58
    1c9e:	0c f0       	brlt	.+2      	; 0x1ca2 <ltoa+0x46>
    1ca0:	69 5d       	subi	r22, 0xD9	; 217
    1ca2:	61 93       	st	Z+, r22
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	60 50       	subi	r22, 0x00	; 0
    1caa:	70 40       	sbci	r23, 0x00	; 0
    1cac:	80 40       	sbci	r24, 0x00	; 0
    1cae:	90 40       	sbci	r25, 0x00	; 0
    1cb0:	51 f7       	brne	.-44     	; 0x1c86 <ltoa+0x2a>
    1cb2:	16 f4       	brtc	.+4      	; 0x1cb8 <ltoa+0x5c>
    1cb4:	cd e2       	ldi	r28, 0x2D	; 45
    1cb6:	c1 93       	st	Z+, r28
    1cb8:	10 82       	st	Z, r1
    1cba:	8f 91       	pop	r24
    1cbc:	9f 91       	pop	r25
    1cbe:	cf 91       	pop	r28
    1cc0:	0c 94 81 10 	jmp	0x2102	; 0x2102 <strrev>

00001cc4 <__mulhi_const_10>:
    1cc4:	7a e0       	ldi	r23, 0x0A	; 10
    1cc6:	97 9f       	mul	r25, r23
    1cc8:	90 2d       	mov	r25, r0
    1cca:	87 9f       	mul	r24, r23
    1ccc:	80 2d       	mov	r24, r0
    1cce:	91 0d       	add	r25, r1
    1cd0:	11 24       	eor	r1, r1
    1cd2:	08 95       	ret

00001cd4 <sprintf>:
    1cd4:	ae e0       	ldi	r26, 0x0E	; 14
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e0 e7       	ldi	r30, 0x70	; 112
    1cda:	fe e0       	ldi	r31, 0x0E	; 14
    1cdc:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x1c>
    1ce0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ce2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ce4:	86 e0       	ldi	r24, 0x06	; 6
    1ce6:	8c 83       	std	Y+4, r24	; 0x04
    1ce8:	1a 83       	std	Y+2, r17	; 0x02
    1cea:	09 83       	std	Y+1, r16	; 0x01
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f e7       	ldi	r25, 0x7F	; 127
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	9e 01       	movw	r18, r28
    1cf6:	27 5e       	subi	r18, 0xE7	; 231
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	6f 89       	ldd	r22, Y+23	; 0x17
    1d00:	78 8d       	ldd	r23, Y+24	; 0x18
    1d02:	a9 01       	movw	r20, r18
    1d04:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <vfprintf>
    1d08:	2f 81       	ldd	r18, Y+7	; 0x07
    1d0a:	38 85       	ldd	r19, Y+8	; 0x08
    1d0c:	02 0f       	add	r16, r18
    1d0e:	13 1f       	adc	r17, r19
    1d10:	f8 01       	movw	r30, r16
    1d12:	10 82       	st	Z, r1
    1d14:	2e 96       	adiw	r28, 0x0e	; 14
    1d16:	e4 e0       	ldi	r30, 0x04	; 4
    1d18:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x1c>

00001d1c <vfprintf>:
    1d1c:	ab e0       	ldi	r26, 0x0B	; 11
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e4 e9       	ldi	r30, 0x94	; 148
    1d22:	fe e0       	ldi	r31, 0x0E	; 14
    1d24:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__>
    1d28:	3c 01       	movw	r6, r24
    1d2a:	2b 01       	movw	r4, r22
    1d2c:	5a 01       	movw	r10, r20
    1d2e:	fc 01       	movw	r30, r24
    1d30:	17 82       	std	Z+7, r1	; 0x07
    1d32:	16 82       	std	Z+6, r1	; 0x06
    1d34:	83 81       	ldd	r24, Z+3	; 0x03
    1d36:	81 fd       	sbrc	r24, 1
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <vfprintf+0x24>
    1d3a:	6f ef       	ldi	r22, 0xFF	; 255
    1d3c:	7f ef       	ldi	r23, 0xFF	; 255
    1d3e:	c6 c1       	rjmp	.+908    	; 0x20cc <vfprintf+0x3b0>
    1d40:	9a e0       	ldi	r25, 0x0A	; 10
    1d42:	89 2e       	mov	r8, r25
    1d44:	1e 01       	movw	r2, r28
    1d46:	08 94       	sec
    1d48:	21 1c       	adc	r2, r1
    1d4a:	31 1c       	adc	r3, r1
    1d4c:	f3 01       	movw	r30, r6
    1d4e:	23 81       	ldd	r18, Z+3	; 0x03
    1d50:	f2 01       	movw	r30, r4
    1d52:	23 fd       	sbrc	r18, 3
    1d54:	85 91       	lpm	r24, Z+
    1d56:	23 ff       	sbrs	r18, 3
    1d58:	81 91       	ld	r24, Z+
    1d5a:	2f 01       	movw	r4, r30
    1d5c:	88 23       	and	r24, r24
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <vfprintf+0x46>
    1d60:	b2 c1       	rjmp	.+868    	; 0x20c6 <vfprintf+0x3aa>
    1d62:	85 32       	cpi	r24, 0x25	; 37
    1d64:	39 f4       	brne	.+14     	; 0x1d74 <vfprintf+0x58>
    1d66:	23 fd       	sbrc	r18, 3
    1d68:	85 91       	lpm	r24, Z+
    1d6a:	23 ff       	sbrs	r18, 3
    1d6c:	81 91       	ld	r24, Z+
    1d6e:	2f 01       	movw	r4, r30
    1d70:	85 32       	cpi	r24, 0x25	; 37
    1d72:	29 f4       	brne	.+10     	; 0x1d7e <vfprintf+0x62>
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	b3 01       	movw	r22, r6
    1d78:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    1d7c:	e7 cf       	rjmp	.-50     	; 0x1d4c <vfprintf+0x30>
    1d7e:	98 2f       	mov	r25, r24
    1d80:	ff 24       	eor	r15, r15
    1d82:	ee 24       	eor	r14, r14
    1d84:	99 24       	eor	r9, r9
    1d86:	ff e1       	ldi	r31, 0x1F	; 31
    1d88:	ff 15       	cp	r31, r15
    1d8a:	d0 f0       	brcs	.+52     	; 0x1dc0 <vfprintf+0xa4>
    1d8c:	9b 32       	cpi	r25, 0x2B	; 43
    1d8e:	69 f0       	breq	.+26     	; 0x1daa <vfprintf+0x8e>
    1d90:	9c 32       	cpi	r25, 0x2C	; 44
    1d92:	28 f4       	brcc	.+10     	; 0x1d9e <vfprintf+0x82>
    1d94:	90 32       	cpi	r25, 0x20	; 32
    1d96:	59 f0       	breq	.+22     	; 0x1dae <vfprintf+0x92>
    1d98:	93 32       	cpi	r25, 0x23	; 35
    1d9a:	91 f4       	brne	.+36     	; 0x1dc0 <vfprintf+0xa4>
    1d9c:	0e c0       	rjmp	.+28     	; 0x1dba <vfprintf+0x9e>
    1d9e:	9d 32       	cpi	r25, 0x2D	; 45
    1da0:	49 f0       	breq	.+18     	; 0x1db4 <vfprintf+0x98>
    1da2:	90 33       	cpi	r25, 0x30	; 48
    1da4:	69 f4       	brne	.+26     	; 0x1dc0 <vfprintf+0xa4>
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	24 c0       	rjmp	.+72     	; 0x1df2 <vfprintf+0xd6>
    1daa:	52 e0       	ldi	r21, 0x02	; 2
    1dac:	f5 2a       	or	r15, r21
    1dae:	84 e0       	ldi	r24, 0x04	; 4
    1db0:	f8 2a       	or	r15, r24
    1db2:	28 c0       	rjmp	.+80     	; 0x1e04 <vfprintf+0xe8>
    1db4:	98 e0       	ldi	r25, 0x08	; 8
    1db6:	f9 2a       	or	r15, r25
    1db8:	25 c0       	rjmp	.+74     	; 0x1e04 <vfprintf+0xe8>
    1dba:	e0 e1       	ldi	r30, 0x10	; 16
    1dbc:	fe 2a       	or	r15, r30
    1dbe:	22 c0       	rjmp	.+68     	; 0x1e04 <vfprintf+0xe8>
    1dc0:	f7 fc       	sbrc	r15, 7
    1dc2:	29 c0       	rjmp	.+82     	; 0x1e16 <vfprintf+0xfa>
    1dc4:	89 2f       	mov	r24, r25
    1dc6:	80 53       	subi	r24, 0x30	; 48
    1dc8:	8a 30       	cpi	r24, 0x0A	; 10
    1dca:	70 f4       	brcc	.+28     	; 0x1de8 <vfprintf+0xcc>
    1dcc:	f6 fe       	sbrs	r15, 6
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <vfprintf+0xbe>
    1dd0:	98 9c       	mul	r9, r8
    1dd2:	90 2c       	mov	r9, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	98 0e       	add	r9, r24
    1dd8:	15 c0       	rjmp	.+42     	; 0x1e04 <vfprintf+0xe8>
    1dda:	e8 9c       	mul	r14, r8
    1ddc:	e0 2c       	mov	r14, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	e8 0e       	add	r14, r24
    1de2:	f0 e2       	ldi	r31, 0x20	; 32
    1de4:	ff 2a       	or	r15, r31
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <vfprintf+0xe8>
    1de8:	9e 32       	cpi	r25, 0x2E	; 46
    1dea:	29 f4       	brne	.+10     	; 0x1df6 <vfprintf+0xda>
    1dec:	f6 fc       	sbrc	r15, 6
    1dee:	6b c1       	rjmp	.+726    	; 0x20c6 <vfprintf+0x3aa>
    1df0:	40 e4       	ldi	r20, 0x40	; 64
    1df2:	f4 2a       	or	r15, r20
    1df4:	07 c0       	rjmp	.+14     	; 0x1e04 <vfprintf+0xe8>
    1df6:	9c 36       	cpi	r25, 0x6C	; 108
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <vfprintf+0xe4>
    1dfa:	50 e8       	ldi	r21, 0x80	; 128
    1dfc:	f5 2a       	or	r15, r21
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <vfprintf+0xe8>
    1e00:	98 36       	cpi	r25, 0x68	; 104
    1e02:	49 f4       	brne	.+18     	; 0x1e16 <vfprintf+0xfa>
    1e04:	f2 01       	movw	r30, r4
    1e06:	23 fd       	sbrc	r18, 3
    1e08:	95 91       	lpm	r25, Z+
    1e0a:	23 ff       	sbrs	r18, 3
    1e0c:	91 91       	ld	r25, Z+
    1e0e:	2f 01       	movw	r4, r30
    1e10:	99 23       	and	r25, r25
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <vfprintf+0xfa>
    1e14:	b8 cf       	rjmp	.-144    	; 0x1d86 <vfprintf+0x6a>
    1e16:	89 2f       	mov	r24, r25
    1e18:	85 54       	subi	r24, 0x45	; 69
    1e1a:	83 30       	cpi	r24, 0x03	; 3
    1e1c:	18 f0       	brcs	.+6      	; 0x1e24 <vfprintf+0x108>
    1e1e:	80 52       	subi	r24, 0x20	; 32
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	38 f4       	brcc	.+14     	; 0x1e32 <vfprintf+0x116>
    1e24:	44 e0       	ldi	r20, 0x04	; 4
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	a4 0e       	add	r10, r20
    1e2a:	b5 1e       	adc	r11, r21
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	59 83       	std	Y+1, r21	; 0x01
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <vfprintf+0x134>
    1e32:	93 36       	cpi	r25, 0x63	; 99
    1e34:	31 f0       	breq	.+12     	; 0x1e42 <vfprintf+0x126>
    1e36:	93 37       	cpi	r25, 0x73	; 115
    1e38:	79 f0       	breq	.+30     	; 0x1e58 <vfprintf+0x13c>
    1e3a:	93 35       	cpi	r25, 0x53	; 83
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <vfprintf+0x124>
    1e3e:	56 c0       	rjmp	.+172    	; 0x1eec <vfprintf+0x1d0>
    1e40:	20 c0       	rjmp	.+64     	; 0x1e82 <vfprintf+0x166>
    1e42:	f5 01       	movw	r30, r10
    1e44:	80 81       	ld	r24, Z
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	42 e0       	ldi	r20, 0x02	; 2
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	a4 0e       	add	r10, r20
    1e4e:	b5 1e       	adc	r11, r21
    1e50:	61 01       	movw	r12, r2
    1e52:	01 e0       	ldi	r16, 0x01	; 1
    1e54:	10 e0       	ldi	r17, 0x00	; 0
    1e56:	12 c0       	rjmp	.+36     	; 0x1e7c <vfprintf+0x160>
    1e58:	f5 01       	movw	r30, r10
    1e5a:	c0 80       	ld	r12, Z
    1e5c:	d1 80       	ldd	r13, Z+1	; 0x01
    1e5e:	f6 fc       	sbrc	r15, 6
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <vfprintf+0x14c>
    1e62:	6f ef       	ldi	r22, 0xFF	; 255
    1e64:	7f ef       	ldi	r23, 0xFF	; 255
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <vfprintf+0x150>
    1e68:	69 2d       	mov	r22, r9
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	42 e0       	ldi	r20, 0x02	; 2
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	a4 0e       	add	r10, r20
    1e72:	b5 1e       	adc	r11, r21
    1e74:	c6 01       	movw	r24, r12
    1e76:	0e 94 76 10 	call	0x20ec	; 0x20ec <strnlen>
    1e7a:	8c 01       	movw	r16, r24
    1e7c:	5f e7       	ldi	r21, 0x7F	; 127
    1e7e:	f5 22       	and	r15, r21
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <vfprintf+0x18e>
    1e82:	f5 01       	movw	r30, r10
    1e84:	c0 80       	ld	r12, Z
    1e86:	d1 80       	ldd	r13, Z+1	; 0x01
    1e88:	f6 fc       	sbrc	r15, 6
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <vfprintf+0x176>
    1e8c:	6f ef       	ldi	r22, 0xFF	; 255
    1e8e:	7f ef       	ldi	r23, 0xFF	; 255
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x17a>
    1e92:	69 2d       	mov	r22, r9
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	42 e0       	ldi	r20, 0x02	; 2
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	a4 0e       	add	r10, r20
    1e9c:	b5 1e       	adc	r11, r21
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <strnlen_P>
    1ea4:	8c 01       	movw	r16, r24
    1ea6:	50 e8       	ldi	r21, 0x80	; 128
    1ea8:	f5 2a       	or	r15, r21
    1eaa:	f3 fe       	sbrs	r15, 3
    1eac:	07 c0       	rjmp	.+14     	; 0x1ebc <vfprintf+0x1a0>
    1eae:	1a c0       	rjmp	.+52     	; 0x1ee4 <vfprintf+0x1c8>
    1eb0:	80 e2       	ldi	r24, 0x20	; 32
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	b3 01       	movw	r22, r6
    1eb6:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    1eba:	ea 94       	dec	r14
    1ebc:	8e 2d       	mov	r24, r14
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	08 17       	cp	r16, r24
    1ec2:	19 07       	cpc	r17, r25
    1ec4:	a8 f3       	brcs	.-22     	; 0x1eb0 <vfprintf+0x194>
    1ec6:	0e c0       	rjmp	.+28     	; 0x1ee4 <vfprintf+0x1c8>
    1ec8:	f6 01       	movw	r30, r12
    1eca:	f7 fc       	sbrc	r15, 7
    1ecc:	85 91       	lpm	r24, Z+
    1ece:	f7 fe       	sbrs	r15, 7
    1ed0:	81 91       	ld	r24, Z+
    1ed2:	6f 01       	movw	r12, r30
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b3 01       	movw	r22, r6
    1ed8:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    1edc:	e1 10       	cpse	r14, r1
    1ede:	ea 94       	dec	r14
    1ee0:	01 50       	subi	r16, 0x01	; 1
    1ee2:	10 40       	sbci	r17, 0x00	; 0
    1ee4:	01 15       	cp	r16, r1
    1ee6:	11 05       	cpc	r17, r1
    1ee8:	79 f7       	brne	.-34     	; 0x1ec8 <vfprintf+0x1ac>
    1eea:	ea c0       	rjmp	.+468    	; 0x20c0 <vfprintf+0x3a4>
    1eec:	94 36       	cpi	r25, 0x64	; 100
    1eee:	11 f0       	breq	.+4      	; 0x1ef4 <vfprintf+0x1d8>
    1ef0:	99 36       	cpi	r25, 0x69	; 105
    1ef2:	69 f5       	brne	.+90     	; 0x1f4e <vfprintf+0x232>
    1ef4:	f7 fe       	sbrs	r15, 7
    1ef6:	08 c0       	rjmp	.+16     	; 0x1f08 <vfprintf+0x1ec>
    1ef8:	f5 01       	movw	r30, r10
    1efa:	20 81       	ld	r18, Z
    1efc:	31 81       	ldd	r19, Z+1	; 0x01
    1efe:	42 81       	ldd	r20, Z+2	; 0x02
    1f00:	53 81       	ldd	r21, Z+3	; 0x03
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0a c0       	rjmp	.+20     	; 0x1f1c <vfprintf+0x200>
    1f08:	f5 01       	movw	r30, r10
    1f0a:	80 81       	ld	r24, Z
    1f0c:	91 81       	ldd	r25, Z+1	; 0x01
    1f0e:	9c 01       	movw	r18, r24
    1f10:	44 27       	eor	r20, r20
    1f12:	37 fd       	sbrc	r19, 7
    1f14:	40 95       	com	r20
    1f16:	54 2f       	mov	r21, r20
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a8 0e       	add	r10, r24
    1f1e:	b9 1e       	adc	r11, r25
    1f20:	9f e6       	ldi	r25, 0x6F	; 111
    1f22:	f9 22       	and	r15, r25
    1f24:	57 ff       	sbrs	r21, 7
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <vfprintf+0x21e>
    1f28:	50 95       	com	r21
    1f2a:	40 95       	com	r20
    1f2c:	30 95       	com	r19
    1f2e:	21 95       	neg	r18
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	4f 4f       	sbci	r20, 0xFF	; 255
    1f34:	5f 4f       	sbci	r21, 0xFF	; 255
    1f36:	e0 e8       	ldi	r30, 0x80	; 128
    1f38:	fe 2a       	or	r15, r30
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	b9 01       	movw	r22, r18
    1f3e:	a1 01       	movw	r20, r2
    1f40:	2a e0       	ldi	r18, 0x0A	; 10
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	0e 94 bd 10 	call	0x217a	; 0x217a <__ultoa_invert>
    1f48:	d8 2e       	mov	r13, r24
    1f4a:	d2 18       	sub	r13, r2
    1f4c:	40 c0       	rjmp	.+128    	; 0x1fce <vfprintf+0x2b2>
    1f4e:	95 37       	cpi	r25, 0x75	; 117
    1f50:	29 f4       	brne	.+10     	; 0x1f5c <vfprintf+0x240>
    1f52:	1f 2d       	mov	r17, r15
    1f54:	1f 7e       	andi	r17, 0xEF	; 239
    1f56:	2a e0       	ldi	r18, 0x0A	; 10
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	1d c0       	rjmp	.+58     	; 0x1f96 <vfprintf+0x27a>
    1f5c:	1f 2d       	mov	r17, r15
    1f5e:	19 7f       	andi	r17, 0xF9	; 249
    1f60:	9f 36       	cpi	r25, 0x6F	; 111
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <vfprintf+0x260>
    1f64:	90 37       	cpi	r25, 0x70	; 112
    1f66:	20 f4       	brcc	.+8      	; 0x1f70 <vfprintf+0x254>
    1f68:	98 35       	cpi	r25, 0x58	; 88
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <vfprintf+0x252>
    1f6c:	ac c0       	rjmp	.+344    	; 0x20c6 <vfprintf+0x3aa>
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <vfprintf+0x272>
    1f70:	90 37       	cpi	r25, 0x70	; 112
    1f72:	39 f0       	breq	.+14     	; 0x1f82 <vfprintf+0x266>
    1f74:	98 37       	cpi	r25, 0x78	; 120
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <vfprintf+0x25e>
    1f78:	a6 c0       	rjmp	.+332    	; 0x20c6 <vfprintf+0x3aa>
    1f7a:	04 c0       	rjmp	.+8      	; 0x1f84 <vfprintf+0x268>
    1f7c:	28 e0       	ldi	r18, 0x08	; 8
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <vfprintf+0x27a>
    1f82:	10 61       	ori	r17, 0x10	; 16
    1f84:	14 fd       	sbrc	r17, 4
    1f86:	14 60       	ori	r17, 0x04	; 4
    1f88:	20 e1       	ldi	r18, 0x10	; 16
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	04 c0       	rjmp	.+8      	; 0x1f96 <vfprintf+0x27a>
    1f8e:	14 fd       	sbrc	r17, 4
    1f90:	16 60       	ori	r17, 0x06	; 6
    1f92:	20 e1       	ldi	r18, 0x10	; 16
    1f94:	32 e0       	ldi	r19, 0x02	; 2
    1f96:	17 ff       	sbrs	r17, 7
    1f98:	08 c0       	rjmp	.+16     	; 0x1faa <vfprintf+0x28e>
    1f9a:	f5 01       	movw	r30, r10
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	44 e0       	ldi	r20, 0x04	; 4
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <vfprintf+0x29e>
    1faa:	f5 01       	movw	r30, r10
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	42 e0       	ldi	r20, 0x02	; 2
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	a4 0e       	add	r10, r20
    1fbc:	b5 1e       	adc	r11, r21
    1fbe:	a1 01       	movw	r20, r2
    1fc0:	0e 94 bd 10 	call	0x217a	; 0x217a <__ultoa_invert>
    1fc4:	d8 2e       	mov	r13, r24
    1fc6:	d2 18       	sub	r13, r2
    1fc8:	8f e7       	ldi	r24, 0x7F	; 127
    1fca:	f8 2e       	mov	r15, r24
    1fcc:	f1 22       	and	r15, r17
    1fce:	f6 fe       	sbrs	r15, 6
    1fd0:	0b c0       	rjmp	.+22     	; 0x1fe8 <vfprintf+0x2cc>
    1fd2:	5e ef       	ldi	r21, 0xFE	; 254
    1fd4:	f5 22       	and	r15, r21
    1fd6:	d9 14       	cp	r13, r9
    1fd8:	38 f4       	brcc	.+14     	; 0x1fe8 <vfprintf+0x2cc>
    1fda:	f4 fe       	sbrs	r15, 4
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <vfprintf+0x2d0>
    1fde:	f2 fc       	sbrc	r15, 2
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <vfprintf+0x2d0>
    1fe2:	8f ee       	ldi	r24, 0xEF	; 239
    1fe4:	f8 22       	and	r15, r24
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <vfprintf+0x2d0>
    1fe8:	1d 2d       	mov	r17, r13
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <vfprintf+0x2d2>
    1fec:	19 2d       	mov	r17, r9
    1fee:	f4 fe       	sbrs	r15, 4
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <vfprintf+0x2f0>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ed 0d       	add	r30, r13
    1ff6:	f1 1d       	adc	r31, r1
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 33       	cpi	r24, 0x30	; 48
    1ffc:	19 f4       	brne	.+6      	; 0x2004 <vfprintf+0x2e8>
    1ffe:	99 ee       	ldi	r25, 0xE9	; 233
    2000:	f9 22       	and	r15, r25
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <vfprintf+0x2f8>
    2004:	1f 5f       	subi	r17, 0xFF	; 255
    2006:	f2 fe       	sbrs	r15, 2
    2008:	05 c0       	rjmp	.+10     	; 0x2014 <vfprintf+0x2f8>
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <vfprintf+0x2f6>
    200c:	8f 2d       	mov	r24, r15
    200e:	86 78       	andi	r24, 0x86	; 134
    2010:	09 f0       	breq	.+2      	; 0x2014 <vfprintf+0x2f8>
    2012:	1f 5f       	subi	r17, 0xFF	; 255
    2014:	0f 2d       	mov	r16, r15
    2016:	f3 fc       	sbrc	r15, 3
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <vfprintf+0x326>
    201a:	f0 fe       	sbrs	r15, 0
    201c:	0f c0       	rjmp	.+30     	; 0x203c <vfprintf+0x320>
    201e:	1e 15       	cp	r17, r14
    2020:	10 f0       	brcs	.+4      	; 0x2026 <vfprintf+0x30a>
    2022:	9d 2c       	mov	r9, r13
    2024:	0b c0       	rjmp	.+22     	; 0x203c <vfprintf+0x320>
    2026:	9d 2c       	mov	r9, r13
    2028:	9e 0c       	add	r9, r14
    202a:	91 1a       	sub	r9, r17
    202c:	1e 2d       	mov	r17, r14
    202e:	06 c0       	rjmp	.+12     	; 0x203c <vfprintf+0x320>
    2030:	80 e2       	ldi	r24, 0x20	; 32
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	b3 01       	movw	r22, r6
    2036:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    203a:	1f 5f       	subi	r17, 0xFF	; 255
    203c:	1e 15       	cp	r17, r14
    203e:	c0 f3       	brcs	.-16     	; 0x2030 <vfprintf+0x314>
    2040:	04 c0       	rjmp	.+8      	; 0x204a <vfprintf+0x32e>
    2042:	1e 15       	cp	r17, r14
    2044:	10 f4       	brcc	.+4      	; 0x204a <vfprintf+0x32e>
    2046:	e1 1a       	sub	r14, r17
    2048:	01 c0       	rjmp	.+2      	; 0x204c <vfprintf+0x330>
    204a:	ee 24       	eor	r14, r14
    204c:	04 ff       	sbrs	r16, 4
    204e:	0f c0       	rjmp	.+30     	; 0x206e <vfprintf+0x352>
    2050:	80 e3       	ldi	r24, 0x30	; 48
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	b3 01       	movw	r22, r6
    2056:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    205a:	02 ff       	sbrs	r16, 2
    205c:	1d c0       	rjmp	.+58     	; 0x2098 <vfprintf+0x37c>
    205e:	01 fd       	sbrc	r16, 1
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <vfprintf+0x34c>
    2062:	88 e7       	ldi	r24, 0x78	; 120
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e c0       	rjmp	.+28     	; 0x2084 <vfprintf+0x368>
    2068:	88 e5       	ldi	r24, 0x58	; 88
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0b c0       	rjmp	.+22     	; 0x2084 <vfprintf+0x368>
    206e:	80 2f       	mov	r24, r16
    2070:	86 78       	andi	r24, 0x86	; 134
    2072:	91 f0       	breq	.+36     	; 0x2098 <vfprintf+0x37c>
    2074:	01 ff       	sbrs	r16, 1
    2076:	02 c0       	rjmp	.+4      	; 0x207c <vfprintf+0x360>
    2078:	8b e2       	ldi	r24, 0x2B	; 43
    207a:	01 c0       	rjmp	.+2      	; 0x207e <vfprintf+0x362>
    207c:	80 e2       	ldi	r24, 0x20	; 32
    207e:	f7 fc       	sbrc	r15, 7
    2080:	8d e2       	ldi	r24, 0x2D	; 45
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	b3 01       	movw	r22, r6
    2086:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <vfprintf+0x37c>
    208c:	80 e3       	ldi	r24, 0x30	; 48
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	b3 01       	movw	r22, r6
    2092:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    2096:	9a 94       	dec	r9
    2098:	d9 14       	cp	r13, r9
    209a:	c0 f3       	brcs	.-16     	; 0x208c <vfprintf+0x370>
    209c:	da 94       	dec	r13
    209e:	f1 01       	movw	r30, r2
    20a0:	ed 0d       	add	r30, r13
    20a2:	f1 1d       	adc	r31, r1
    20a4:	80 81       	ld	r24, Z
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	b3 01       	movw	r22, r6
    20aa:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    20ae:	dd 20       	and	r13, r13
    20b0:	a9 f7       	brne	.-22     	; 0x209c <vfprintf+0x380>
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <vfprintf+0x3a4>
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	b3 01       	movw	r22, r6
    20ba:	0e 94 91 10 	call	0x2122	; 0x2122 <fputc>
    20be:	ea 94       	dec	r14
    20c0:	ee 20       	and	r14, r14
    20c2:	c1 f7       	brne	.-16     	; 0x20b4 <vfprintf+0x398>
    20c4:	43 ce       	rjmp	.-890    	; 0x1d4c <vfprintf+0x30>
    20c6:	f3 01       	movw	r30, r6
    20c8:	66 81       	ldd	r22, Z+6	; 0x06
    20ca:	77 81       	ldd	r23, Z+7	; 0x07
    20cc:	cb 01       	movw	r24, r22
    20ce:	2b 96       	adiw	r28, 0x0b	; 11
    20d0:	e2 e1       	ldi	r30, 0x12	; 18
    20d2:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__>

000020d6 <strnlen_P>:
    20d6:	fc 01       	movw	r30, r24
    20d8:	05 90       	lpm	r0, Z+
    20da:	61 50       	subi	r22, 0x01	; 1
    20dc:	70 40       	sbci	r23, 0x00	; 0
    20de:	01 10       	cpse	r0, r1
    20e0:	d8 f7       	brcc	.-10     	; 0x20d8 <strnlen_P+0x2>
    20e2:	80 95       	com	r24
    20e4:	90 95       	com	r25
    20e6:	8e 0f       	add	r24, r30
    20e8:	9f 1f       	adc	r25, r31
    20ea:	08 95       	ret

000020ec <strnlen>:
    20ec:	fc 01       	movw	r30, r24
    20ee:	61 50       	subi	r22, 0x01	; 1
    20f0:	70 40       	sbci	r23, 0x00	; 0
    20f2:	01 90       	ld	r0, Z+
    20f4:	01 10       	cpse	r0, r1
    20f6:	d8 f7       	brcc	.-10     	; 0x20ee <strnlen+0x2>
    20f8:	80 95       	com	r24
    20fa:	90 95       	com	r25
    20fc:	8e 0f       	add	r24, r30
    20fe:	9f 1f       	adc	r25, r31
    2100:	08 95       	ret

00002102 <strrev>:
    2102:	dc 01       	movw	r26, r24
    2104:	fc 01       	movw	r30, r24
    2106:	67 2f       	mov	r22, r23
    2108:	71 91       	ld	r23, Z+
    210a:	77 23       	and	r23, r23
    210c:	e1 f7       	brne	.-8      	; 0x2106 <strrev+0x4>
    210e:	32 97       	sbiw	r30, 0x02	; 2
    2110:	04 c0       	rjmp	.+8      	; 0x211a <strrev+0x18>
    2112:	7c 91       	ld	r23, X
    2114:	6d 93       	st	X+, r22
    2116:	70 83       	st	Z, r23
    2118:	62 91       	ld	r22, -Z
    211a:	ae 17       	cp	r26, r30
    211c:	bf 07       	cpc	r27, r31
    211e:	c8 f3       	brcs	.-14     	; 0x2112 <strrev+0x10>
    2120:	08 95       	ret

00002122 <fputc>:
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	8c 01       	movw	r16, r24
    212c:	eb 01       	movw	r28, r22
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	81 ff       	sbrs	r24, 1
    2132:	1b c0       	rjmp	.+54     	; 0x216a <fputc+0x48>
    2134:	82 ff       	sbrs	r24, 2
    2136:	0d c0       	rjmp	.+26     	; 0x2152 <fputc+0x30>
    2138:	2e 81       	ldd	r18, Y+6	; 0x06
    213a:	3f 81       	ldd	r19, Y+7	; 0x07
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	9d 81       	ldd	r25, Y+5	; 0x05
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	64 f4       	brge	.+24     	; 0x215e <fputc+0x3c>
    2146:	e8 81       	ld	r30, Y
    2148:	f9 81       	ldd	r31, Y+1	; 0x01
    214a:	01 93       	st	Z+, r16
    214c:	f9 83       	std	Y+1, r31	; 0x01
    214e:	e8 83       	st	Y, r30
    2150:	06 c0       	rjmp	.+12     	; 0x215e <fputc+0x3c>
    2152:	e8 85       	ldd	r30, Y+8	; 0x08
    2154:	f9 85       	ldd	r31, Y+9	; 0x09
    2156:	80 2f       	mov	r24, r16
    2158:	09 95       	icall
    215a:	89 2b       	or	r24, r25
    215c:	31 f4       	brne	.+12     	; 0x216a <fputc+0x48>
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	9f 83       	std	Y+7, r25	; 0x07
    2166:	8e 83       	std	Y+6, r24	; 0x06
    2168:	02 c0       	rjmp	.+4      	; 0x216e <fputc+0x4c>
    216a:	0f ef       	ldi	r16, 0xFF	; 255
    216c:	1f ef       	ldi	r17, 0xFF	; 255
    216e:	c8 01       	movw	r24, r16
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	08 95       	ret

0000217a <__ultoa_invert>:
    217a:	fa 01       	movw	r30, r20
    217c:	aa 27       	eor	r26, r26
    217e:	28 30       	cpi	r18, 0x08	; 8
    2180:	51 f1       	breq	.+84     	; 0x21d6 <__ultoa_invert+0x5c>
    2182:	20 31       	cpi	r18, 0x10	; 16
    2184:	81 f1       	breq	.+96     	; 0x21e6 <__ultoa_invert+0x6c>
    2186:	e8 94       	clt
    2188:	6f 93       	push	r22
    218a:	6e 7f       	andi	r22, 0xFE	; 254
    218c:	6e 5f       	subi	r22, 0xFE	; 254
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	8f 4f       	sbci	r24, 0xFF	; 255
    2192:	9f 4f       	sbci	r25, 0xFF	; 255
    2194:	af 4f       	sbci	r26, 0xFF	; 255
    2196:	b1 e0       	ldi	r27, 0x01	; 1
    2198:	3e d0       	rcall	.+124    	; 0x2216 <__ultoa_invert+0x9c>
    219a:	b4 e0       	ldi	r27, 0x04	; 4
    219c:	3c d0       	rcall	.+120    	; 0x2216 <__ultoa_invert+0x9c>
    219e:	67 0f       	add	r22, r23
    21a0:	78 1f       	adc	r23, r24
    21a2:	89 1f       	adc	r24, r25
    21a4:	9a 1f       	adc	r25, r26
    21a6:	a1 1d       	adc	r26, r1
    21a8:	68 0f       	add	r22, r24
    21aa:	79 1f       	adc	r23, r25
    21ac:	8a 1f       	adc	r24, r26
    21ae:	91 1d       	adc	r25, r1
    21b0:	a1 1d       	adc	r26, r1
    21b2:	6a 0f       	add	r22, r26
    21b4:	71 1d       	adc	r23, r1
    21b6:	81 1d       	adc	r24, r1
    21b8:	91 1d       	adc	r25, r1
    21ba:	a1 1d       	adc	r26, r1
    21bc:	20 d0       	rcall	.+64     	; 0x21fe <__ultoa_invert+0x84>
    21be:	09 f4       	brne	.+2      	; 0x21c2 <__ultoa_invert+0x48>
    21c0:	68 94       	set
    21c2:	3f 91       	pop	r19
    21c4:	2a e0       	ldi	r18, 0x0A	; 10
    21c6:	26 9f       	mul	r18, r22
    21c8:	11 24       	eor	r1, r1
    21ca:	30 19       	sub	r19, r0
    21cc:	30 5d       	subi	r19, 0xD0	; 208
    21ce:	31 93       	st	Z+, r19
    21d0:	de f6       	brtc	.-74     	; 0x2188 <__ultoa_invert+0xe>
    21d2:	cf 01       	movw	r24, r30
    21d4:	08 95       	ret
    21d6:	46 2f       	mov	r20, r22
    21d8:	47 70       	andi	r20, 0x07	; 7
    21da:	40 5d       	subi	r20, 0xD0	; 208
    21dc:	41 93       	st	Z+, r20
    21de:	b3 e0       	ldi	r27, 0x03	; 3
    21e0:	0f d0       	rcall	.+30     	; 0x2200 <__ultoa_invert+0x86>
    21e2:	c9 f7       	brne	.-14     	; 0x21d6 <__ultoa_invert+0x5c>
    21e4:	f6 cf       	rjmp	.-20     	; 0x21d2 <__ultoa_invert+0x58>
    21e6:	46 2f       	mov	r20, r22
    21e8:	4f 70       	andi	r20, 0x0F	; 15
    21ea:	40 5d       	subi	r20, 0xD0	; 208
    21ec:	4a 33       	cpi	r20, 0x3A	; 58
    21ee:	18 f0       	brcs	.+6      	; 0x21f6 <__ultoa_invert+0x7c>
    21f0:	49 5d       	subi	r20, 0xD9	; 217
    21f2:	31 fd       	sbrc	r19, 1
    21f4:	40 52       	subi	r20, 0x20	; 32
    21f6:	41 93       	st	Z+, r20
    21f8:	02 d0       	rcall	.+4      	; 0x21fe <__ultoa_invert+0x84>
    21fa:	a9 f7       	brne	.-22     	; 0x21e6 <__ultoa_invert+0x6c>
    21fc:	ea cf       	rjmp	.-44     	; 0x21d2 <__ultoa_invert+0x58>
    21fe:	b4 e0       	ldi	r27, 0x04	; 4
    2200:	a6 95       	lsr	r26
    2202:	97 95       	ror	r25
    2204:	87 95       	ror	r24
    2206:	77 95       	ror	r23
    2208:	67 95       	ror	r22
    220a:	ba 95       	dec	r27
    220c:	c9 f7       	brne	.-14     	; 0x2200 <__ultoa_invert+0x86>
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	61 05       	cpc	r22, r1
    2212:	71 05       	cpc	r23, r1
    2214:	08 95       	ret
    2216:	9b 01       	movw	r18, r22
    2218:	ac 01       	movw	r20, r24
    221a:	0a 2e       	mov	r0, r26
    221c:	06 94       	lsr	r0
    221e:	57 95       	ror	r21
    2220:	47 95       	ror	r20
    2222:	37 95       	ror	r19
    2224:	27 95       	ror	r18
    2226:	ba 95       	dec	r27
    2228:	c9 f7       	brne	.-14     	; 0x221c <__ultoa_invert+0xa2>
    222a:	62 0f       	add	r22, r18
    222c:	73 1f       	adc	r23, r19
    222e:	84 1f       	adc	r24, r20
    2230:	95 1f       	adc	r25, r21
    2232:	a0 1d       	adc	r26, r0
    2234:	08 95       	ret

00002236 <__prologue_saves__>:
    2236:	2f 92       	push	r2
    2238:	3f 92       	push	r3
    223a:	4f 92       	push	r4
    223c:	5f 92       	push	r5
    223e:	6f 92       	push	r6
    2240:	7f 92       	push	r7
    2242:	8f 92       	push	r8
    2244:	9f 92       	push	r9
    2246:	af 92       	push	r10
    2248:	bf 92       	push	r11
    224a:	cf 92       	push	r12
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	ca 1b       	sub	r28, r26
    2260:	db 0b       	sbc	r29, r27
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	09 94       	ijmp

0000226e <__epilogue_restores__>:
    226e:	2a 88       	ldd	r2, Y+18	; 0x12
    2270:	39 88       	ldd	r3, Y+17	; 0x11
    2272:	48 88       	ldd	r4, Y+16	; 0x10
    2274:	5f 84       	ldd	r5, Y+15	; 0x0f
    2276:	6e 84       	ldd	r6, Y+14	; 0x0e
    2278:	7d 84       	ldd	r7, Y+13	; 0x0d
    227a:	8c 84       	ldd	r8, Y+12	; 0x0c
    227c:	9b 84       	ldd	r9, Y+11	; 0x0b
    227e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2280:	b9 84       	ldd	r11, Y+9	; 0x09
    2282:	c8 84       	ldd	r12, Y+8	; 0x08
    2284:	df 80       	ldd	r13, Y+7	; 0x07
    2286:	ee 80       	ldd	r14, Y+6	; 0x06
    2288:	fd 80       	ldd	r15, Y+5	; 0x05
    228a:	0c 81       	ldd	r16, Y+4	; 0x04
    228c:	1b 81       	ldd	r17, Y+3	; 0x03
    228e:	aa 81       	ldd	r26, Y+2	; 0x02
    2290:	b9 81       	ldd	r27, Y+1	; 0x01
    2292:	ce 0f       	add	r28, r30
    2294:	d1 1d       	adc	r29, r1
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	ed 01       	movw	r28, r26
    22a2:	08 95       	ret

000022a4 <_exit>:
    22a4:	f8 94       	cli

000022a6 <__stop_program>:
    22a6:	ff cf       	rjmp	.-2      	; 0x22a6 <__stop_program>
